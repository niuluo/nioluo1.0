var PatientDetailMGData = {};
var BindingData = [];
var GenderList = [{Type: 0, Name: "请选择性别"}, {Type: 1, Name: "男"}, {Type: 2, Name: "女"}];
var TreatTypeList = [{Type: 1, Name: "初诊"}, {Type: 2, Name: "复诊"}];
var PatientDetailMG = {
    initPatientDetailMGData: function () {
        var a = CommonFun.getDataFromSession("CurrentUser");
        var b = CommonFun.getDataFromSession("CurrentPatient");
        var c = CommonFun.getDataFromSession("module");
        var d = {Header: {Token: "", StatusCode: 0, Message: "", OperateCode: 1, TimeStamp: 0}, Body: ""};
        if (a != null) {
            d.Header.Token = a.Header.Token;
            d.Header.Module = c;
            d.Body = {PatientID: b.PatientID}
        } else {
            window.location.href = "/DentalClinicClient/WebPages/Login.html"
        }
        try {
            $.ajax({
                type: "post", data: JSON.stringify(d), url: WebServer.getUrl("PatientDetail"), success: function (e) {
                    if (e.Header.StatusCode == 1) {
                        window.location.href = "/DentalClinicClient/WebPages/Login.html";
                        return
                    }
                    $(".body_hide").css("opacity", "1");
                    $("#loading_div").modal("hide");
                    if (e.Header.StatusCode == 0) {
                        PatientDetailMGData = e.Body;
                        angular.bootstrap($("#main-content"), ["PatientDetailModule"])
                    } else {
                        alert("获取数据失败，请稍后重试！")
                    }
                }
            })
        } catch (f) {
            console.log(f)
        }
    }, validateRequired: function (b, a) {
        if (!CommonFun.checkFormat(b, DataTypeEnum.Required)) {
            return "此项为必填项"
        } else {
            return true
        }
    }, validateTreatType: function (b, a) {
        if (b == "") {
            return "请选择就诊类型"
        } else {
            return true
        }
    }, validateDoctor: function (b, a) {
        if (b == "number:0" || b == "") {
            return "请选择医生"
        } else {
            return true
        }
    }, validateTreatItem: function (b, a) {
        if (b == "number:0" || b == "") {
            return "请选择回访的就诊事项"
        } else {
            return true
        }
    }, validateVisitor: function (b, a) {
        if (b == "") {
            return "请选择回访人员"
        } else {
            return true
        }
    }, init: function () {
        $("#loading_div").modal("show");
        MenuActive.setActive(MenuEnum.PatientMG);
        CommonFun.bindingDateControl("workday", new Date(), "", false);
        PatientDetailMG.initPatientDetailMGData();
        $.formValidator.initConfig({validatorGroup: "1", mode: "AlertTip"});
        $($("#new_reservation select[name='treatType']")[0]).formValidator({validatorGroup: "1"}).functionValidator({fun: PatientDetailMG.validateTreatType});
        $($("#new_reservation select[name='doctorName']")[0]).formValidator({validatorGroup: "1"}).functionValidator({fun: PatientDetailMG.validateDoctor});
        $($("#new_reservation textarea[name='bookItem']")[0]).formValidator({validatorGroup: "1"}).functionValidator({fun: PatientDetailMG.validateRequired});
        $.formValidator.initConfig({validatorGroup: "2", mode: "AlertTip"});
        $($("#new_visit select[name='visitItem']")[0]).formValidator({validatorGroup: "2"}).functionValidator({fun: PatientDetailMG.validateTreatItem});
        $($("#new_visit select[name='visitor']")[0]).formValidator({validatorGroup: "2"}).functionValidator({fun: PatientDetailMG.validateVisitor});
        $($("#new_visit textarea[name='visitContent']")[0]).formValidator({validatorGroup: "2"}).functionValidator({fun: PatientDetailMG.validateRequired});
        $($("#new_visit textarea[name='visitResult']")[0]).formValidator({validatorGroup: "2"}).functionValidator({fun: PatientDetailMG.validateRequired})
    }
};
var patientDetailModule = angular.module("PatientDetailModule", ["HttpModule", "angularFileUpload", "PatientCommonModule", "PermissionModule"]);
patientDetailModule.factory("PatientDetailFactory", ["PatientCommonFactory", "ResourceFactory", function (b, a) {
    var d = function (k) {
        var j = {TopLeft: [], TopRight: [], BottomLeft: [], BottomRight: []};
        if (k != null && k != "" && k != undefined) {
            var f = k.split(",");
            if (f != undefined && f != null && f.length > 0) {
                for (var h = 0; h < f.length; h++) {
                    var g = f[h].split("-");
                    switch (g[0]) {
                        case"a":
                            j.TopLeft.push({value: g[1], position: 1, isSelected: true});
                            break;
                        case"b":
                            j.TopRight.push({value: g[1], position: 2, isSelected: true});
                            break;
                        case"c":
                            j.BottomLeft.push({value: g[1], position: 3, isSelected: true});
                            break;
                        case"d":
                            j.BottomRight.push({value: g[1], position: 4, isSelected: true});
                            break;
                        default:
                            break
                    }
                }
            }
        }
        j.TopLeft = b.SortByData(j.TopLeft);
        j.TopRight = b.SortByData(j.TopRight);
        j.BottomLeft = b.SortByData(j.BottomLeft);
        j.BottomRight = b.SortByData(j.BottomRight);
        return j
    };
    var e = function (f) {
        a.MsgBox.Alert("消息", f)
    };
    var c = function (g, h, f) {
        a.MsgBox.Confirm("温馨提示", g, h, f)
    };
    return {
        DealAppointListResponse: function (g) {
            if (g != undefined && g != null && g != "") {
                PatientDetailMGData.CombinationData = [];
                for (var f = 0; f < g.length; f++) {
                    g[f].Appoint.AppointTypeName = TreatTypeList[g[f].Appoint.AppointType - 1].Name;
                    PatientDetailMGData.CombinationData.push({
                        DateTime: new Date(g[f].Appoint.BeginTime).Format("yyyy-MM-dd"),
                        DataType: 1,
                        ModelValue: JSON.stringify(g[f])
                    })
                }
            }
            return g
        }, DealAppointmentRequest: function (g, h) {
            var f = {};
            if (g != undefined && g != null && g != "") {
                f = {
                    ID: g.ID,
                    AppointID: g.AppointID,
                    AppointNo: g.AppointNo,
                    AppointDetail: "",
                    PatientID: h.PatientID,
                    PatientName: h.Name,
                    BeginTime: g.BeginTime,
                    EndTime: g.EndTime,
                    Birthday: h.Birthday,
                    Gender: h.Gender.Type,
                    Mobile: h.Mobile,
                    AppointItemID: g.AppointItemID,
                    AppointItemName: g.AppointItemName,
                    Address: h.Address,
                    OtherContact: h.OtherContact,
                    AppointTime: g.AppointTime,
                    Status: g.Status,
                    DoctorID: g.DoctorID,
                    DoctorName: g.DoctorName,
                    AppointType: g.AppointType,
                    State: g.State,
                    CreateTime: g.CreateTime,
                    PatientLevelID: h.PatientLevel.PatientLevelID,
                    PatientLevelName: h.PatientLevel.Name,
                    PatientSourceID: h.PatientSource.PatientSourceID,
                    PatientSourceName: h.PatientSource.Name,
                    Remark: g.Remark,
                    TenantID: g.TenantID
                }
            }
            return f
        }, DealVisitRequest: function (g, h) {
            var f = {};
            if (g != undefined && g != "" && g != null) {
                f = {
                    CreateTime: "",
                    Gender: h.Gender,
                    ID: g.ID,
                    AppointItemID: h.AppointItemID,
                    AppointItemName: h.AppointItemName,
                    Mobile: h.Mobile,
                    PatientID: h.PatientID,
                    PatientLevelID: h.PatientLevelID,
                    PatientLevelName: h.PatientLevelName,
                    PatientName: h.PatientName,
                    PatientSourceID: h.PatientSourceID,
                    PatientSourceName: h.PatientSourceName,
                    Remark: g.Remark,
                    State: 0,
                    Status: g.Status,
                    TenantID: g.TenantID,
                    TreatDetail: h.AppointItemName,
                    TreatDoctorID: h.DoctorID,
                    TreatDoctorName: h.DoctorName,
                    TreatID: h.AppointID,
                    TreatTime: h.BeginTime,
                    VisitContent: g.VisitContent,
                    VisitID: g.VisitID,
                    VisitResult: g.VisitResult,
                    VisitTime: g.VisitTime,
                    VisitorID: g.UserID,
                    VisitorName: g.UserName
                }
            }
            return f
        }, DealMedicalRecordList: function (k, l) {
            if (k != undefined && k != null && k.length > 0) {
                for (var g = 0; g < k.length; g++) {
                    if (k[g].Treat.AppointID != null && l != undefined && l.length > 0) {
                        for (var f = 0; f < l.length; f++) {
                            if (k[g].Treat.AppointID == l[f].Appoint.AppointID) {
                                var h = {
                                    AppointItemID: l[f].Appoint.AppointItemID,
                                    AppointItemName: l[f].Appoint.AppointItemName,
                                    BeginTime: l[f].Appoint.BeginTime,
                                    DoctorID: l[f].Appoint.DoctorID,
                                    DoctorName: l[f].Appoint.DoctorName,
                                    SubCategoryID: l[f].Appoint.SubCategoryID
                                };
                                k[g].Appointment = h;
                                break
                            }
                        }
                    } else {
                        var h = {
                            AppointItemID: 0,
                            AppointItemName: "无",
                            BeginTime: "无",
                            DoctorID: "",
                            DoctorName: "无",
                            SubCategoryID: ""
                        };
                        k[g].Appointment = h
                    }
                    if (k[g].TreatFileList != null && k[g].TreatFileList.length > 0) {
                        for (var f = 0; f < k[g].TreatFileList.length; f++) {
                            k[g].TreatFileList[f].isShowUpload = false;
                            if (k[g].TreatFileList[f].FileType == 1) {
                                k[g].TreatFileList[f].ClassName = "icon-picture";
                                k[g].TreatFileList[f].FileTypeName = "图片"
                            }
                            if (k[g].TreatFileList[f].FileType == 2) {
                                k[g].TreatFileList[f].ClassName = "icon-film";
                                k[g].TreatFileList[f].FileTypeName = "视频"
                            }
                            if (k[g].TreatFileList[f].FileType == 3) {
                                k[g].TreatFileList[f].ClassName = "icon-file-text-alt";
                                k[g].TreatFileList[f].FileTypeName = "文本"
                            }
                        }
                    }
                    PatientDetailMGData.CombinationData.push({
                        DateTime: new Date(k[g].Treat.CreateTime).Format("yyyy-MM-dd"),
                        DataType: 2,
                        ModelValue: JSON.stringify(k[g])
                    })
                }
            }
            return k
        }, DealMedicalRecordRequest: function (h, f, p) {
            var t = {};
            var r = {};
            var s = [];
            if (h != undefined && h != "" && h != null) {
                r = {
                    ID: h.ID,
                    AllergyHistory: h.AllergyHistory,
                    AppointID: h.AppointID,
                    ChiefComplaints: h.ChiefComplaints,
                    CreateTime: h.CreateTime,
                    DoctorID: h.DoctorID,
                    MedicalRecordNo: h.MedicalRecordNo,
                    NurseID: h.NurseID,
                    NurseName: h.NurseName,
                    PresentIllness: h.PresentIllness,
                    PastHistory: h.PastHistory,
                    PatientID: h.PatientID,
                    State: h.State,
                    TenantID: h.TenantID,
                    TreatID: h.TreatID,
                    TreatNo: h.TreatNo,
                    Advice: h.Advice
                };
                var q = $.merge(h.CheckItems, h.DiagnoseItems);
                var o = $.merge(h.HelpCheckItems, h.TreatItems);
                var n = $.merge(q, o);
                for (var k = 0; k < n.length; k++) {
                    var m = "";
                    var l = "";
                    if (n[k].TeethList != undefined && n[k].TeethList != null) {
                        if (n[k].TeethList.BottomLeft != undefined && n[k].TeethList.BottomLeft.length > 0) {
                            for (var g = 0; g < n[k].TeethList.BottomLeft.length; g++) {
                                l = "c-";
                                if (m == "") {
                                    m = l + n[k].TeethList.BottomLeft[g].value
                                } else {
                                    m = m + "," + l + n[k].TeethList.BottomLeft[g].value
                                }
                            }
                        }
                        if (n[k].TeethList.BottomRight != undefined && n[k].TeethList.BottomRight.length > 0) {
                            for (var g = 0; g < n[k].TeethList.BottomRight.length; g++) {
                                l = "d-";
                                if (m == "") {
                                    m = l + n[k].TeethList.BottomRight[g].value
                                } else {
                                    m = m + "," + l + n[k].TeethList.BottomRight[g].value
                                }
                            }
                        }
                        if (n[k].TeethList.TopLeft != undefined && n[k].TeethList.TopLeft.length > 0) {
                            for (var g = 0; g < n[k].TeethList.TopLeft.length; g++) {
                                l = "a-";
                                if (m == "") {
                                    m = l + n[k].TeethList.TopLeft[g].value
                                } else {
                                    m = m + "," + l + n[k].TeethList.TopLeft[g].value
                                }
                            }
                        }
                        if (n[k].TeethList.TopRight != undefined && n[k].TeethList.TopRight.length > 0) {
                            for (var g = 0; g < n[k].TeethList.TopRight.length; g++) {
                                l = "b-";
                                if (m == "") {
                                    m = l + n[k].TeethList.TopRight[g].value
                                } else {
                                    m = m + "," + l + n[k].TeethList.TopRight[g].value
                                }
                            }
                        }
                        s.push({
                            ID: n[k].ID,
                            TreatDetailID: n[k].TreatDetailID,
                            TreatID: h.TreatID,
                            PatientID: h.PatientID,
                            DetailType: n[k].DetailType,
                            DetailContent: n[k].DetailContent,
                            ToothPosition: m,
                            ToothType: n[k].ToothType,
                            State: n[k].State,
                            CreateTime: n[k].CreateTime,
                            TenantID: h.TenantID
                        })
                    }
                }
            }
            if (f != undefined && f != "" && f.length > 0) {
                for (var k = 0; k < f.length; k++) {
                    var m = "";
                    var l = "";
                    if (f[k].Teeth.length > 0) {
                        for (var g = 0; g < f[k].Teeth.length; g++) {
                            switch (f[k].Teeth[g].position) {
                                case 1:
                                    l = "a-";
                                    break;
                                case 2:
                                    l = "b-";
                                    break;
                                case 3:
                                    l = "c-";
                                    break;
                                case 4:
                                    l = "d-";
                                    break;
                                default:
                                    break
                            }
                            if (m == "") {
                                m = l + f[k].Teeth[g].value
                            } else {
                                m = m + "," + l + f[k].Teeth[g].value
                            }
                        }
                    }
                    s.push({
                        ID: 0,
                        TreatDetailID: 0,
                        TreatID: h.TreatID,
                        PatientID: h.PatientID,
                        DetailType: f[k].DetailType,
                        DetailContent: f[k].Content,
                        ToothPosition: m,
                        ToothType: f[k].ToothType,
                        State: 0,
                        CreateTime: "",
                        TenantID: h.TenantID
                    })
                }
            }
            if (p == 2) {
                t.Treat = r;
                t.TreatDetailList = s
            } else {
                t = r
            }
            return t
        }, DealMedicalRecord: function (o) {
            var q = {};
            var f = [];
            var h = [];
            var l = [];
            var p = [];
            if (o.TreatDetailList != undefined && o.TreatDetailList != null && o.TreatDetailList.length > 0) {
                var j = 0;
                var g = 0;
                var n = 0;
                var m = 0;
                for (var k = 0; k < o.TreatDetailList.length; k++) {
                    switch (o.TreatDetailList[k].DetailType) {
                        case 1:
                            j++;
                            if (j > 1) {
                                o.TreatDetailList[k].ItemName = ""
                            } else {
                                o.TreatDetailList[k].ItemName = "检查"
                            }
                            o.TreatDetailList[k].TeethList = d(o.TreatDetailList[k].ToothPosition);
                            f.push(o.TreatDetailList[k]);
                            break;
                        case 2:
                            g++;
                            if (g > 1) {
                                o.TreatDetailList[k].ItemName = ""
                            } else {
                                o.TreatDetailList[k].ItemName = "辅助检查"
                            }
                            o.TreatDetailList[k].TeethList = d(o.TreatDetailList[k].ToothPosition);
                            h.push(o.TreatDetailList[k]);
                            break;
                        case 3:
                            n++;
                            if (n > 1) {
                                o.TreatDetailList[k].ItemName = ""
                            } else {
                                o.TreatDetailList[k].ItemName = "诊断"
                            }
                            o.TreatDetailList[k].TeethList = d(o.TreatDetailList[k].ToothPosition);
                            l.push(o.TreatDetailList[k]);
                            break;
                        case 4:
                            m++;
                            if (m > 1) {
                                o.TreatDetailList[k].ItemName = ""
                            } else {
                                o.TreatDetailList[k].ItemName = "治疗"
                            }
                            o.TreatDetailList[k].TeethList = d(o.TreatDetailList[k].ToothPosition);
                            p.push(o.TreatDetailList[k]);
                            break;
                        default:
                            break
                    }
                }
            } else {
                f = [{
                    ID: 0,
                    TreatDetailID: "",
                    TreatID: "",
                    PatientID: "",
                    DetailType: 1,
                    DetailContent: "",
                    ToothPosition: "",
                    ToothType: 1,
                    State: 0,
                    CreateTime: "",
                    TenantID: "",
                    ItemName: "检查",
                    TeethList: {}
                }];
                h = [{
                    ID: 0,
                    TreatDetailID: "",
                    TreatID: "",
                    PatientID: "",
                    DetailType: 2,
                    DetailContent: "",
                    ToothPosition: "",
                    ToothType: 1,
                    State: 0,
                    CreateTime: "",
                    TenantID: "",
                    ItemName: "辅助检查",
                    TeethList: {}
                }];
                l = [{
                    ID: 0,
                    TreatDetailID: "",
                    TreatID: "",
                    PatientID: "",
                    DetailType: 3,
                    DetailContent: "",
                    ToothPosition: "",
                    ToothType: 1,
                    State: 0,
                    CreateTime: "",
                    TenantID: "",
                    ItemName: "诊断",
                    TeethList: {}
                }];
                p = [{
                    ID: 0,
                    TreatDetailID: "",
                    TreatID: "",
                    PatientID: "",
                    DetailType: 4,
                    DetailContent: "",
                    ToothPosition: "",
                    ToothType: 1,
                    State: 0,
                    CreateTime: "",
                    TenantID: "",
                    ItemName: "治疗",
                    TeethList: {}
                }]
            }
            q = {
                TenantID: o.Treat.TenantID,
                TreatNo: o.Treat.TreatNo,
                TreatID: o.Treat.TreatID,
                State: o.Treat.State,
                PresentIllness: o.Treat.PresentIllness,
                PatientID: o.Treat.PatientID,
                PastHistory: o.Treat.PastHistory,
                NurseID: o.Treat.NurseID,
                NurseName: o.Treat.NurseName,
                ID: o.Treat.ID,
                DoctorID: o.Treat.DoctorID,
                CreateTime: o.Treat.CreateTime,
                ChiefComplaints: o.Treat.ChiefComplaints,
                AppointItemName: o.Treat.AppointItemName,
                AppointID: o.Treat.AppointID,
                AppointDateTime: o.Treat.AppointDateTime,
                AllergyHistory: o.Treat.AllergyHistory,
                Appointment: o.Appointment,
                TreatDetailList: o.TreatDetailList,
                TreatFileList: o.TreatFileList,
                CheckItems: f,
                HelpCheckItems: h,
                DiagnoseItems: l,
                TreatItems: p
            };
            return q
        }, DealVisitResponse: function (g) {
            if (g != undefined && g != null && g.length > 0) {
                for (var f = 0; f < g.length; f++) {
                    PatientDetailMGData.CombinationData.push({
                        DateTime: new Date(g[f].CreateTime).Format("yyyy-MM-dd"),
                        DataType: 3,
                        ModelValue: JSON.stringify(g[f])
                    })
                }
            }
            return g
        }, DealMedicalTemplateContent: function (k, g) {
            if (k != undefined && k != null && k.length > 0) {
                if (g.currentDom && g.currentDom.DomObj) {
                    var j = g.currentDom.DomObj.val();
                    for (var h = 0; h < k.length; h++) {
                        if (parseInt(g.currentDom.ContentType) == k[h].Category) {
                            g.tempParam = k[h].Contents[0].Content;
                            var f = "";
                            switch (k[h].Category) {
                                case 1:
                                    f = "主诉";
                                    break;
                                case 2:
                                    f = "现病史";
                                    break;
                                case 3:
                                    f = "既往史";
                                    break;
                                case 4:
                                    f = "过敏史";
                                    break;
                                case 5:
                                    f = "检查";
                                    break;
                                case 6:
                                    f = "辅助检查";
                                    break;
                                case 7:
                                    f = "诊断";
                                    break;
                                case 8:
                                    f = "治疗";
                                    break;
                                default:
                                    break
                            }
                            if (!j) {
                                g.currentDom.DomObj.val(k[h].Contents[0].Content)
                            } else {
                                c(f + "已填写内容，确定要替换替换已填写的内容吗？", function () {
                                    g.currentDom.DomObj.val(g.tempParam);
                                    g.$apply()
                                })
                            }
                            break
                        }
                    }
                } else {
                    for (var h = 0; h < k.length; h++) {
                        switch (k[h].Category) {
                            case 1:
                                g.currentMedicalRecord.ChiefComplaints = k[h].Contents[0].Content;
                                break;
                            case 2:
                                g.currentMedicalRecord.PresentIllness = k[h].Contents[0].Content;
                                break;
                            case 3:
                                g.currentMedicalRecord.PastHistory = k[h].Contents[0].Content;
                                break;
                            case 4:
                                g.currentMedicalRecord.AllergyHistory = k[h].Contents[0].Content;
                                break;
                            case 5:
                                g.currentMedicalRecord.CheckItems[0].DetailContent = k[h].Contents[0].Content;
                                break;
                            case 6:
                                g.currentMedicalRecord.HelpCheckItems[0].DetailContent = k[h].Contents[0].Content;
                                break;
                            case 7:
                                g.currentMedicalRecord.DiagnoseItems[0].DetailContent = k[h].Contents[0].Content;
                                break;
                            case 8:
                                g.currentMedicalRecord.TreatItems[0].DetailContent = k[h].Contents[0].Content;
                                break;
                            default:
                                break
                        }
                    }
                }
            }
        }
    }
}]);
patientDetailModule.service("PatientDetailService", ["PatientDetailFactory", "ResourceFactory", "HttpService", "$upload", "PermissionFactory", function (h, c, d, g, b) {
    var a = {};
    var f = {};
    var e = function (k, j) {
        switch (k.DataType) {
            case 1:
                var i = JSON.parse(k.ModelValue);
                j.Appoints.push({
                    AppointDescription: "就诊事项：" + (i.Appoint.AppointItemName == null ? "暂无" : i.Appoint.AppointItemName) + "；就诊医生：" + (i.Appoint.DoctorName == null ? "暂无" : i.Appoint.DoctorName) + "；就诊类型：" + (i.Appoint.AppointTypeName == null ? "暂无" : i.Appoint.AppointTypeName),
                    Appoint: i
                });
                break;
            case 2:
                var i = JSON.parse(k.ModelValue);
                j.Medicals.push({
                    MedicalDescription: "病案主诉：" + (i.Treat.ChiefComplaints == null ? "暂无" : i.Treat.ChiefComplaints) + "；病案现病史：" + (i.Treat.PresentIllness == null ? "暂无" : i.Treat.PresentIllness) + "；就诊医生：" + (i.Appointment == undefined ? "暂无" : i.Appointment.DoctorName),
                    Medical: i
                });
                break;
            case 3:
                var i = JSON.parse(k.ModelValue);
                j.Visits.push({
                    VisitDescription: "回访事项：" + (i.VisitItemName == null ? "暂无" : i.VisitItemName) + "；回访人员：" + (i.VisitorName == null ? "暂无" : i.VisitorName) + "；回访结果：" + (i.VisitResult == null ? "暂无" : i.VisitResult),
                    Visit: i
                });
                break;
            default:
                break
        }
    };
    a.getVisitTreatList = function (m) {
        var n = PatientDetailMGData.AppointList;
        var k = m.currentPatient;
        var j = [];
        if (n != undefined && n != "" && n != null) {
            for (var l = 0; l < n.length; l++) {
                if (n[l].Status == 4) {
                    j.push(n[l])
                }
            }
        }
        return j
    };
    a.convertAppointList = function (i) {
        return h.DealAppointListResponse(i)
    };
    a.convertToViewModel = function (i) {
        return h.DealMedicalRecord(i)
    };
    a.convertMedicalRecordList = function (i, j) {
        return h.DealMedicalRecordList(i, j)
    };
    a.groupCombinationData = function (k) {
        f = k;
        var m = [];
        if (PatientDetailMGData.CombinationData != undefined && PatientDetailMGData.CombinationData.length > 0) {
            m = PatientDetailMGData.CombinationData.sort(function (q, p) {
                var s = new Date(q.DateTime);
                var r = new Date(p.DateTime);
                return r - s
            })
        }
        var j = [];
        if (m != undefined && m != null && m.length > 0) {
            var o = 0;
            if (m.length > 1) {
                while (o < m.length - 1) {
                    var i = 1;
                    var l = o;
                    var n = {Appoints: [], Medicals: [], Visits: []};
                    while (l < m.length - 1 && m[l].DateTime == m[l + 1].DateTime) {
                        if (i == 1) {
                            e(m[l], n);
                            e(m[l + 1], n)
                        } else {
                            e(m[l + 1], n)
                        }
                        l++;
                        i++
                    }
                    if (m[o].DateTime != m[o + 1].DateTime) {
                        e(m[l], n)
                    }
                    j.push({
                        AppointTitle: "就诊及账单记录",
                        MedicalTitle: "电子病历",
                        VisitTitle: "回访记录",
                        DateTime: m[o].DateTime,
                        GroupList: n
                    });
                    o = o + i
                }
            }
            if (m.length == 1) {
                j.push({
                    DateTime: m[0].DateTime,
                    AppointTitle: "就诊及账单记录",
                    MedicalTitle: "电子病历",
                    VisitTitle: "回访记录",
                    GroupList: n
                })
            }
        }
        return j
    };
    a.getVisitList = function (i) {
        return h.DealVisitResponse(i)
    };
    a.saveReservation = function (m) {
        var j = m.startTime.getHours();
        var l = m.startTime.getMinutes();
        var n = m.startTime.getSeconds();
        var p = m.endTime.getHours();
        var q = m.endTime.getMinutes();
        var r = m.endTime.getSeconds();
        var i = m.appointment;
        i.AppointType = m.selectedTreatType.Type;
        i.DoctorID = m.selectedDoctor.UserID;
        i.DoctorName = m.selectedDoctor.UserName;
        i.AppointItemID = m.selectedIllness.MedicalID;
        i.AppointItemName = m.selectedIllness.Text;
        if (j < 10) {
            j = "0" + m.startTime.getHours()
        }
        if (l < 10) {
            l = "0" + m.startTime.getMinutes()
        }
        if (n < 10) {
            n = "0" + m.startTime.getSeconds()
        }
        if (p < 10) {
            p = "0" + m.endTime.getHours()
        }
        if (q < 10) {
            q = "0" + m.endTime.getMinutes()
        }
        if (r < 10) {
            r = "0" + m.endTime.getSeconds()
        }
        i.BeginTime = m.appointment.AppointTime + " " + j + ":" + l + ":" + n;
        i.EndTime = m.appointment.AppointTime + " " + p + ":" + q + ":" + r;
        var k = h.DealAppointmentRequest(i, m.currentPatient);
        try {
            d.appointmentRequest(k, c.operateCode.insert, function (s) {
                if (s.Header.StatusCode == 0) {
                    s.Body.AppointTypeName = TreatTypeList[s.Body.AppointType - 1].Name;
                    m.appointList.push(s.Body);
                    $("#new_reservation").modal("hide");
                    a.alert("预约信息保存成功！")
                } else {
                    a.alert("预约信息保存失败，请稍后重试！")
                }
            }, function (s) {
                console.log(s)
            })
        } catch (o) {
            console.log(o)
        }
    };
    a.saveVisit = function (k) {
        var j = h.DealVisitRequest(k.visit, k.selectedTreatItem);
        var i = k.selectedVisitor;
        j.VisitorID = i.UserID;
        j.VisitorName = i.UserName;
        try {
            d.visitRequest(j, c.operateCode.insert, function (m) {
                if (m.Header.StatusCode == 0) {
                    $("#new_visit").modal("hide");
                    a.alert("回访信息保存成功！");
                    k.visitList.push(m.Body)
                } else {
                    a.alert("回访信息保存失败，请稍候重试！")
                }
            }, function (m) {
                a.alert("系统繁忙，请稍后再试！");
                console.log(m)
            })
        } catch (l) {
            console.log(l)
        }
    };
    a.saveMedicalRecord = function (j, i) {
        var k = h.DealMedicalRecordRequest(j.currentMedicalRecord, i, 2);
        try {
            d.treatRequest(k, c.operateCode.update, function (n) {
                if (n.Header.StatusCode == 0) {
                    $("#medical_record").modal("hide");
                    for (var p = 0; p < j.CombinationDataList.length; p++) {
                        if (j.CombinationDataList[p].GroupList.Medicals != null && j.CombinationDataList[p].GroupList.Medicals.length > 0) {
                            for (var o = 0; o < j.CombinationDataList[p].GroupList.Medicals.length; o++) {
                                if (j.CombinationDataList[p].GroupList.Medicals[o].Medical.Treat != null && j.CombinationDataList[p].GroupList.Medicals[o].Medical.Treat.TreatID == k.Treat.TreatID) {
                                    j.CombinationDataList[p].GroupList.Medicals[o].Medical.Treat = n.Body.Treat;
                                    j.CombinationDataList[p].GroupList.Medicals[o].Medical.TreatDetailList = n.Body.TreatDetailList;
                                    j.showDetail(j.CombinationDataList[p].GroupList.Medicals[o], 2, "");
                                    break
                                }
                            }
                        }
                    }
                    if (j.isSendAdviceSMS) {
                        if (!j.currentPatient.OpenID) {
                            a.alert("对不起，无法推送医嘱信息，请先绑定微信号！")
                        } else {
                            var m = {
                                touser: j.currentPatient.OpenID,
                                template_id: "",
                                url: WeChatURL + "DCAdviceDetail.html?TreatID=" + j.currentItem.MedicalDetail.Treat.TreatID,
                                data: {
                                    first: {
                                        value: j.currentItem.MedicalDetail.Appointment.AppointItemName + "后注意事项",
                                        color: "#173177"
                                    },
                                    keyword1: {
                                        value: j.currentItem.MedicalDetail.Appointment.AppointItemName,
                                        color: "#173177"
                                    },
                                    keyword2: {value: j.currentMedicalRecord.Advice, color: "#173177"},
                                    keyword3: {
                                        value: j.currentItem.MedicalDetail.Appointment.BeginTime,
                                        color: "#173177"
                                    },
                                    remark: {value: "如有其它不适，请来院咨询！", color: "#173177"}
                                }
                            };
                            a.sendMedicalAdvice(m)
                        }
                    } else {
                        a.alert("更新成功！")
                    }
                } else {
                    a.alert("保存失败，请稍候重试！")
                }
            }, function (m) {
                a.alert("系统繁忙，请稍后再试！");
                console.log(m)
            })
        } catch (l) {
            console.log(l)
        }
    };
    a.calculateDocCount = function (n, l) {
        var k = 0;
        var j = 0;
        var o = 0;
        if (l != undefined && l.length > 0) {
            for (var m = 0; m < l.length; m++) {
                switch (l[m].FileType) {
                    case 1:
                        k++;
                        break;
                    case 2:
                        j++;
                        break;
                    case 3:
                        o++;
                        break;
                    default:
                        break
                }
            }
        }
        n.imgCount = k;
        n.vedioCount = j;
        n.textCount = o;
        n.docTotalCount = (l == null ? 0 : l.length)
    };
    a.uploadFiles = function (o, m) {
        var j = o.newFiles;
        var l = o.currentFile;
        var q = 0;
        try {
            switch (m) {
                case 1:
                    for (var p = 0; p < j.length; p++) {
                        var k = "";
                        if (j[p].type == 1) {
                            k = WebServer.getUrl("UpLoadImage")
                        }
                        if (j[p].type != 1) {
                            k = WebServer.getUrl("UpLoadFile")
                        }
                        var n = {
                            Token: CommonFun.getDataFromSession("CurrentUser").Header.Token,
                            Module: c.module,
                            TenantID: o.currentPatient.TenantID,
                            PatientID: o.currentPatient.PatientID,
                            TreatID: o.currentMedicalRecord.TreatID,
                            FileType: j[p].type
                        };
                        g.upload({url: k, data: n, file: j[p].file}).progress(function (i) {
                            var s = parseInt(100 * i.loaded / i.total);
                            console.log(s)
                        }).success(function (t) {
                            if (t.Header.StatusCode == 0) {
                                q++;
                                if (q == j.length) {
                                    a.alert("共有" + q + "个文件上传成功！");
                                    o.newFiles = []
                                }
                                if (o.currentItem.MedicalDetail.TreatFileList == null) {
                                    o.currentItem.MedicalDetail.TreatFileList = []
                                }
                                var i = "";
                                var s = "";
                                switch (j[q - 1].file.type) {
                                    case 1:
                                        i = "图片";
                                        s = "icon-picture";
                                        break;
                                    case 2:
                                        i = "视频";
                                        s = "icon-film";
                                        break;
                                    case 3:
                                        i = "文本";
                                        s = "icon-file-text-alt";
                                        break;
                                    default:
                                        break
                                }
                                o.currentItem.MedicalDetail.TreatFileList.push({
                                    SourceName: j[q - 1].file.name,
                                    FileType: j[q - 1].file.type,
                                    FileName: t.Body[0].FileName,
                                    FileTypeName: i,
                                    ClassName: s,
                                    CreateTime: new Date().Format("yyyy-MM-dd hh:mm:ss"),
                                    Description: j[q - 1].file.Description,
                                    isShowUpload: false
                                })
                            } else {
                                q++;
                                if (q == j.length) {
                                    a.alert("共有" + q + "个文件上传失败！")
                                }
                            }
                        }).error(function (i) {
                            a.alert("上传失败！")
                        })
                    }
                    break;
                case 2:
                    if (l.FileType == 1) {
                        k = WebServer.getUrl("UpLoadImage")
                    }
                    if (l.FileType != 1) {
                        k = WebServer.getUrl("UpLoadFile")
                    }
                    var n = {
                        Token: CommonFun.getDataFromSession("CurrentUser").Header.Token,
                        Module: c.module,
                        TenantID: o.currentPatient.TenantID,
                        PatientID: o.currentPatient.PatientID,
                        TreatID: o.currentMedicalRecord.TreatID,
                        FileType: l.FileType
                    };
                    g.upload({url: k, data: n, file: l.File}).progress(function (i) {
                        var s = parseInt(100 * i.loaded / i.total)
                    }).success(function (v) {
                        if (v.Header.StatusCode == 0) {
                            if (o.currentItem.MedicalDetail.TreatFileList == null) {
                                o.currentItem.MedicalDetail.TreatFileList = []
                            }
                            var s = "";
                            var u = "";
                            switch (l.FileType) {
                                case 1:
                                    s = "图片";
                                    u = "icon-picture";
                                    break;
                                case 2:
                                    s = "视频";
                                    u = "icon-film";
                                    break;
                                case 3:
                                    s = "文本";
                                    u = "icon-file-text-alt";
                                    break;
                                default:
                                    break
                            }
                            if (o.currentItem.MedicalDetail.TreatFileList.length <= 0) {
                                o.currentItem.MedicalDetail.TreatFileList.push({
                                    FileType: l.FileType,
                                    FileTypeName: s,
                                    ClassName: u,
                                    CreateTime: new Date().Format("yyyy-MM-dd hh:mm:ss"),
                                    Description: l.Description,
                                    isShowUpload: false,
                                    FileName: v.Body[0].FileName
                                })
                            } else {
                                for (var t = 0; t < o.currentItem.MedicalDetail.TreatFileList.length; t++) {
                                    if (o.currentItem.MedicalDetail.TreatFileList[t].SourceName == l.SourceName && o.currentItem.MedicalDetail.TreatFileList[t]) {
                                        o.currentItem.MedicalDetail.TreatFileList[t].FileType = l.FileType;
                                        o.currentItem.MedicalDetail.TreatFileList[t].FileTypeName = s;
                                        o.currentItem.MedicalDetail.TreatFileList[t].ClassName = u;
                                        o.currentItem.MedicalDetail.TreatFileList[t].CreateTime = new Date().Format("yyyy-MM-dd hh:mm:ss");
                                        o.currentItem.MedicalDetail.TreatFileList[t].Description = l.Description;
                                        o.currentItem.MedicalDetail.TreatFileList[t].isShowUpload = false;
                                        o.currentItem.MedicalDetail.TreatFileList[t].FileName = v.Body[0].FileName;
                                        break
                                    }
                                }
                            }
                            a.calculateDocCount(o, o.currentItem.MedicalDetail.TreatFileList);
                            l.isShowUpload = false;
                            a.alert("上传成功！")
                        } else {
                            a.alert("文件上传失败，请稍后重试！")
                        }
                    }).error(function (i) {
                        a.alert("上传失败！")
                    });
                    break;
                default:
                    break
            }
        } catch (r) {
            console.log(r)
        }
    };
    a.upudateFileInfo = function (j, i, l) {
        var k = {
            ID: i.ID,
            TreatFileID: i.TreatFileID,
            TreatID: i.TreatID,
            PatientID: i.PatientID,
            SourceName: i.SourceName,
            FileName: i.FileName,
            Description: i.Description,
            FileType: i.FileType,
            State: i.State,
            CreateTime: i.CreateTime,
            TenantID: i.TenantID
        };
        if (k.State != 1) {
            k.Description = j.fileRemark
        }
        try {
            d.treatFileRequest(k, c.operateCode.update, function (m) {
                if (m.Header.StatusCode == 0) {
                    if (k.State == 1) {
                        $($($(l.target).parent()[0]).parent()[0]).remove()
                    } else {
                        j.currentFileDetail.Description = j.fileRemark
                    }
                } else {
                    a.alert("更新失败");
                    console.log(m)
                }
            }, function (m) {
                a.alert("服务器繁忙，请稍后再试！");
                console.log(m)
            })
        } catch (l) {
            console.log(l)
        }
    };
    a.getCatalogItems = function (i, j, l) {
        var k = {TenantID: CommonFun.getDataFromSession("CurrentUser").Body.Tenant.TenantID};
        if (l != undefined && l == "") {
            k.CategoryID = l
        }
        try {
            d.subCatalogRequest(k, c.operateCode.get, function (n) {
                if (n.Header.StatusCode == 0) {
                    if (l == undefined) {
                        i.CatalogItems = n.Body;
                        i.createTree(i.CatalogItems, j)
                    }
                    i.SubItems = i.CatalogItems[0].SubCategories
                } else {
                    a.alert(GetErrormsg(n.Header.StatusCode))
                }
            }, function (n) {
                a.alert("系统繁忙，请稍后重试！");
                console.log(n)
            })
        } catch (m) {
            console.log(m)
        }
    };
    a.getMedicalItems = function (i, l, k) {
        var j = {
            TenantID: CommonFun.getDataFromSession("CurrentUser").Body.Tenant.TenantID,
            CategoryID: l.CategoryID,
            SubCategoryID: l.SubCategoryID
        };
        try {
            d.recordItemsRequest(j, c.operateCode.get, function (n) {
                if (n.Header.StatusCode == 0) {
                    k.removeChildNodes();
                    f.RecordItems = n.Body;
                    if (f.RecordItems == null || f.RecordItems.length == 0) {
                        a.alert("没有病例项目！")
                    } else {
                        var p = "icon-folder-close-alt";
                        for (var o = 0; o < f.RecordItems.length; o++) {
                            k.createChildNode(f.RecordItems[o].Name, false, p, null, "", JSON.stringify(f.RecordItems[o]), 4, function (s, q) {
                                var r = $.parseJSON(s);
                                a.getMedicalTemplateByItem(r, q)
                            })
                        }
                        k.expanded = false;
                        k.expandNode()
                    }
                } else {
                    a.alert(GetErrormsg(n.Header.StatusCode))
                }
            }, function (n) {
                a.alert("系统繁忙，请稍后重试！");
                console.log(n)
            })
        } catch (m) {
            console.log(m)
        }
    };
    a.getMedicalTemplateByItem = function (i, k) {
        var j = {
            TenantID: CommonFun.getDataFromSession("CurrentUser").Body.Tenant.TenantID,
            RecordItemID: i.RecordItemID
        };
        try {
            d.medicalTemplateRequest(j, c.operateCode.get, function (m) {
                if (m.Header.StatusCode == 0) {
                    f.RecordTemplateItems = m.Body;
                    if (f.RecordTemplateItems && f.RecordTemplateItems.length > 0) {
                        var o = "icon-medkit";
                        k.removeChildNodes();
                        for (var n = 0; n < f.RecordTemplateItems.length; n++) {
                            k.createChildNode(f.RecordTemplateItems[n].Name, false, o, null, "", JSON.stringify(f.RecordTemplateItems[n]), 4, function (q) {
                                var p = $.parseJSON(q);
                                a.getMedicalContent(p)
                            })
                        }
                        k.expanded = false;
                        k.expandNode()
                    } else {
                        a.alert("当前目录没有病历模版，请先到系统设置中添加病历模版！")
                    }
                } else {
                    a.alert(GetErrormsg(m.Header.StatusCode))
                }
            }, function (m) {
                a.alert("系统繁忙，请稍后重试！");
                console.log(m)
            })
        } catch (l) {
            console.log(l)
        }
    };
    a.getMedicalContent = function (k) {
        var i = {TenantID: k.TenantID, TemplateID: k.TemplateID};
        try {
            d.medicalTemplateContentRequest(i, c.operateCode.get, function (l) {
                if (l.Header.StatusCode == 0) {
                    if (l.Body && l.Body.length > 0) {
                        h.DealMedicalTemplateContent(l.Body, f)
                    } else {
                        a.alert("当前模版没有任何内容，清先前往系统设置，增加该病历模版内容！")
                    }
                } else {
                    a.alert(GetErrormsg(l.Header.StatusCode))
                }
            }, function (l) {
                a.alert("系统繁忙，请稍候重试！");
                console.log(l)
            })
        } catch (j) {
            console.log(j)
        }
    };
    a.getMedicalAdvices = function (j, i) {
        try {
            d.adviceItemsRequest(j, c.operateCode.get, function (l) {
                if (l.Header.StatusCode == 0) {
                    i.adviceTemplates = l.Body
                } else {
                    a.alert(GetErrormsg(l.Header.StatusCode))
                }
            }, function (l) {
                a.alert("系统繁忙，请稍候再试");
                console.log(l)
            })
        } catch (k) {
            console.log(k)
        }
    };
    a.getAdviceContent = function (j, i) {
        try {
            d.adviceContentRequest(j, c.operateCode.get, function (m) {
                if (m.Header.StatusCode == 0) {
                    i.adviceTemplateContent = m.Body;
                    var l = "";
                    if (i.adviceTemplateContent) {
                        for (var o = 0; o < i.adviceTemplateContent.length; o++) {
                            l = l + i.adviceTemplateContent[o].Self.Content + "\r";
                            if (i.adviceTemplateContent[o].Childs.length > 0) {
                                for (var n = 0; n < i.adviceTemplateContent[o].Childs.length; n++) {
                                    l = l + (n + 1) + ". " + i.adviceTemplateContent[o].Childs[n].Self.Content + "\r"
                                }
                            }
                        }
                    }
                    i.currentMedicalRecord.Advice = l
                } else {
                    a.alert(GetErrormsg(m.Header.StatusCode))
                }
            }, function (l) {
                a.alert("系统繁忙，请稍候再试！");
                console.log(l)
            })
        } catch (k) {
            console.log(k)
        }
    };
    a.sendMedicalAdvice = function (i) {
        try {
            d.sendAdviceRequest(i, c.operateCode.insert, function (k) {
                if (k.Header.StatusCode == 0) {
                    a.alert("医嘱提示信息已发送成功！医嘱信息请查看患者详情！")
                } else {
                    alert(GetErrormsg(k.Header.StatusCode))
                }
            }, function (k) {
                a.alert("服务器繁忙，请稍候重试！");
                console.log(k)
            })
        } catch (j) {
            console.log(j)
        }
    };
    a.isWithOperatePermission = function (i) {
        var j = c.Auths[i];
        return b.isWithOperatePermission(CommonFun.getDataFromSession("module"), j)
    };
    a.confirm = function (j, k, i) {
        c.MsgBox.Confirm("温馨提示", j, k, i)
    };
    a.alert = function (i) {
        c.MsgBox.Alert("消息", i)
    };
    return a
}]);
patientDetailModule.controller("PatientDetailController", ["$scope", "PatientDetailService", "PatientCommonService", "$compile", "ResourceFactory", function (c, e, b, d, a) {
    c.showUrl = FileURL;
    c.initialize = function () {
        c.agreementList = [{
            Name: "牙体牙髓病治疗知情同意书",
            FileName: "agreement_1.xml",
            DocName: "agreement_1.doc"
        }, {Name: "口腔外科拔牙手术知情同意书", FileName: "agreement_2.xml", DocName: "agreement_2.doc"}, {
            Name: "固定义齿修复知情同意书",
            FileName: "agreement_3.xml",
            DocName: "agreement_3.doc"
        }, {Name: "活动/全口义齿修复知情同意书", FileName: "agreement_4.xml", DocName: "agreement_4.doc"}, {
            Name: "牙体牙髓病治疗须知",
            FileName: "agreement_5.xml",
            DocName: "agreement_5.doc"
        }, {Name: "口腔外科拔牙手术治疗须知", FileName: "agreement_6.xml", DocName: "agreement_6.doc"}, {
            Name: "种植治疗同意书",
            FileName: "agreement_7.xml",
            DocName: "agreement_7.doc"
        }];
        c.appointList = e.convertAppointList(PatientDetailMGData.AppointList);
        c.visitList = e.getVisitList(PatientDetailMGData.VisitList);
        c.medicalList = e.convertMedicalRecordList(PatientDetailMGData.TreatList, PatientDetailMGData.AppointList);
        c.currentPatient = PatientDetailMGData.Patient;
        c.currentPatient.PatientLevel = PatientDetailMGData.Level;
        c.currentPatient.PatientSource = PatientDetailMGData.Source;
        a.module = CommonFun.getDataFromSession("module");
        if (!c.currentPatient.Name) {
            c.currentPatient.Name = c.currentPatient.PatientName
        }
        c.currentPatient.Age = c.currentPatient.Birthday != null && c.currentPatient.Birthday != "" ? CommonFun.calculateAge(new Date(c.currentPatient.Birthday).Format("yyyy-MM-dd")) : "";
        c.CombinationDataList = e.groupCombinationData(c);
        e.getVisitTreatList(c);
        if (c.CombinationDataList.length > 0) {
            if (c.CombinationDataList[0].GroupList.Appoints.length > 0) {
                c.showDetail(c.CombinationDataList[0].GroupList.Appoints[0], 1, "")
            } else {
                if (c.CombinationDataList[0].GroupList.Medicals.length > 0) {
                    c.showDetail(c.CombinationDataList[0].GroupList.Medicals[0], 2, "")
                } else {
                    if (c.CombinationDataList[0].GroupList.Visits.length > 0) {
                        c.showDetail(c.CombinationDataList[0].GroupList.Visits[0], 3, "")
                    }
                }
            }
        }
        setTimeout(function () {
            $($("#cd-timeline div.content_item")[0]).addClass("content_item_active")
        }, 500);
        c.isSendAdviceSMS = false
    };
    c.deleteFile = function (g, h) {
        if (g.ID == 0) {
            for (var f = 0; f < c.newFiles.length; f++) {
                if (c.newFiles[f].file.name == g.SourceName) {
                    c.newFiles.splice(f, 1);
                    break
                }
            }
            $($($(h.target).parent()[0]).parent()[0]).remove()
        } else {
            g.State = 1;
            e.upudateFileInfo(c, g, h)
        }
    };
    c.uploadSingleFile = function (f, g) {
        c.currentFile = f;
        e.uploadFiles(c, 2)
    };
    c.downloadSingleFile = function (h, j) {
        var i = "";
        switch (h.FileType) {
            case 1:
                i = "Image/";
                break;
            case 2:
                i = "File/";
                break;
            case 3:
                i = "File/";
                break;
            default:
                break
        }
        var g = FileURL + i + h.FileName;
        var k = h.FileName.split("/");
        var f = document.getElementById("down_load");
        f.href = g;
        f.download = k[1];
        f.click()
    };
    c.showFileDetail2 = function (p, s, m) {
        if ($(s.target).prop("tagName") == "IMG") {
            c.showFileDetail(p, {target: $(s.target).parent().prev()}, m);
        } else {
            c.showFileDetail(p, {target: $(s.target).prev()}, m);
        }
    };
    c.showFileDetail = function (i, l, f) {
        c.fileRemark = i.Description;
        c.currentFileDetail = i;
        var h = 120;
        var k = -40;
        var g = angular.element('<div class="file_show" style="display:none;position: absolute;z-index:99999;background-color:gainsboro;border-radius:5px;padding:5px;"><div style="height: 60%; text-align: center; margin: 2px;"><img style="width:50%;height:100%;" src="{{currentFileDetail.imgSrc}}" alt="暂无文件" ng-if="currentFileDetail.FileType == 1"><span ng-if="currentFileDetail.FileType != 1" class="{{currentFileDetail.ClassName}}" style="width:100%;height:100%;display:block;font-size:50px;"></span></div><div><input class="file_remark form-control" placeholder="文件备注" ng-blur="hideFileDetail($event);" ng-model="fileRemark"></div></div>');
        $(g).css({left: k, top: -100, height: 100, width: 200, position: "absolute"});
        switch (i.FileType) {
            case 1:
                if (i == undefined || i.FileName == "") {
                    c.currentFileDetail.ClassName = "icon-picture"
                } else {
                    c.currentFileDetail.imgSrc = FileURL + "Image/" + i.FileName
                }
                break;
            case 2:
                c.currentFileDetail.ClassName = "icon-film";
                break;
            case 3:
                c.currentFileDetail.ClassName = "icon-file-text-alt";
                break;
            default:
                break
        }
        if ($(l.target).children("div.file_show").length) {
            $($(l.target).children("div.file_show")[0]).find("input.file_remark");
            $($(l.target).children("div.file_show")[0]).fadeIn();
            $($($(l.target).children("div.file_show")[0]).find("input.file_remark")).focus()
        } else {
            var j = d(g)(c);
            angular.element($(l.target)).append(j);
            $(j).fadeIn();
            $($(j).find("input.file_remark")).focus()
        }
    };
    c.hideFileDetail = function (f) {
        if (c.currentFileDetail.Description != c.fileRemark && c.fileRemark != "") {
            c.currentFileDetail.Description = c.fileRemark;
            e.upudateFileInfo(c, c.currentFileDetail)
        }
        $($($(f.target).parent()[0]).parent()[0]).fadeOut()
    };
    c.selectFile = function () {
        $("#selectFile").click()
    };
    c.addFiles = function (j) {
        if (j != undefined && j != "" && j.length > 0) {
            for (var f = 0; f < j.length; f++) {
                var h = 0;
                var g = "";
                if (j[f].name.indexOf(".jpg") > -1 || j[f].name.indexOf(".png") > -1 || j[f].name.indexOf(".gif") > -1 || j[f].name.indexOf(".jpeg") > -1 || j[f].name.indexOf(".svg") > -1) {
                    h = 1;
                    g = "icon-picture";
                    c.newFiles.push({type: 1, file: j[f]})
                } else {
                    if (j[f].name.indexOf(".ppt") > -1 || j[f].name.indexOf(".pdf") > -1 || j[f].name.indexOf(".doc") > -1 || j[f].name.indexOf(".docx") > -1 || j[f].name.indexOf(".xls") > -1 || j[f].name.indexOf(".xlsx") > -1 || j[f].name.indexOf(".txt") > -1) {
                        h = 3;
                        g = "icon-file-text-alt";
                        c.newFiles.push({type: 3, file: j[f]})
                    } else {
                        if (j[f].name.indexOf(".rm") > -1 || j[f].name.indexOf(".rmvb") > -1 || j[f].name.indexOf(".avi") > -1 || j[f].name.indexOf(".mp4") > -1 || j[f].name.indexOf(".3gp") > -1) {
                            h = 2;
                            g = "icon-film";
                            c.newFiles.push({type: 2, file: j[f]})
                        } else {
                            e.alert("添加失败，目前只支持图片和视频文件的上传，请重新选择文件！");
                            return
                        }
                    }
                }
                c.currentMedicalRecord.TreatFileList = (c.currentMedicalRecord.TreatFileList == null ? [] : c.currentMedicalRecord.TreatFileList);
                c.currentMedicalRecord.TreatFileList.push({
                    ID: 0,
                    TreatFileID: "",
                    TreatID: c.currentMedicalRecord.TreatID,
                    PatientID: c.currentPatient.PatientID,
                    ClassName: g,
                    SourceName: j[f].name,
                    Description: "",
                    FileType: h,
                    FileName: j[f].name,
                    File: j[f],
                    State: 0,
                    CreateTime: "",
                    TenantID: c.currentPatient.TenantID,
                    isShowUpload: true
                })
            }
        }
    };
    c.uploadFiles = function () {
        if (c.newFiles.length > 0) {
            e.uploadFiles(c, 1)
        } else {
            e.alert("对不起，没有新的文件要上传！")
        }
    };
    c.showChargeDetail = function (f) {
        c.costItems = f;
        $("#charge_detail").modal("show")
    };
    c.addNewVisit = function () {
        c.completeTreatList = e.getVisitTreatList(c);
        c.doctors = PatientDetailMGData.Doctors;
        c.visit = {ID: 0, VisitID: 0, TenantID: c.currentPatient.TenantID, Status: 1};
        $("#new_visit").modal("show")
    };
    c.saveVisit = function () {
        if (!$.formValidator.pageIsValid("2")) {
            return
        }
        e.saveVisit(c)
    };
    c.closeMedicacl = function () {
        $("#tooth").css("display", "none");
        $("#medical_record").modal("hide");
        b.closeAgreement(c)
    };
    c.drawTooth = function (h, f, g) {
        $("#constant_select_reverse").removeAttr("checked");
        $("#constant_select_all").removeAttr("checked");
        b.drawTooth(c, h);
        c.isOld = g;
        c.currentItem = f
    };
    c.clickTooth = function (f, g) {
        b.clickTooth(f.target, g, c)
    };
    c.saveSelectedTeeth = function () {
        b.saveSelectedTeeth(c)
    };
    c.switchTooth = function (f) {
        b.switchTooth(f, c)
    };
    c.quickSelect = function (k, g) {
        var m = "";
        if (g == 1) {
            if (k == 1) {
                $("#constant_select_reverse").removeAttr("checked")
            } else {
                $("#constant_select_all").removeAttr("checked")
            }
            m = $("#permanent_teeth span.tooth_span")
        } else {
            if (k == 1) {
                $("#baby_select_reverse").removeAttr("checked")
            } else {
                $("#baby_select_all").removeAttr("checked")
            }
            m = $("#baby_teeth span.tooth_span")
        }
        if (m && m.length > 0) {
            var l = (k == 1 ? true : false);
            if (k == 1) {
                if (g == 1) {
                    l = $("#constant_select_all").attr("checked") ? true : false
                } else {
                    l = $("#baby_select_all").attr("checked") ? true : false
                }
            }
            for (var h = 0; h < m.length; h++) {
                var j = m[h];
                var f = $(j).attr("data-bind");
                b.clickTooth(j, f, c, l)
            }
        }
    };
    c.deleteItem = function (g, f) {
        b.deleteItem(g, f)
    };
    c.addItem = function (f, h, g) {
        b.addItem(f, h, c, g)
    };
    c.chooseTemplate = function () {
        b.chooseTemplate()
    };
    c.saveMedicalRecord = function () {
        var f = b.getMedicalDetail();
        e.confirm("是否对患者【" + c.currentPatient.Name + "】，推送医嘱信息？", function () {
            c.isSendAdviceSMS = true;
            if (!c.currentMedicalRecord.Advice) {
                e.alert("请填写医嘱信息！");
                return
            }
            e.saveMedicalRecord(c, f)
        }, function () {
            c.isSendAdviceSMS = false;
            e.saveMedicalRecord(c, f)
        })
    };
    c.editMedicalRecord = function (h) {
        var i = CommonFun.getDataFromSession("module");
        var f = "";
        if (parseInt(i) == MenuEnum.PatientMG) {
            f = "PatientMG_editMedical"
        }
        if (parseInt(i) == MenuEnum.PlatformMG) {
            f = "WorkPlatform_editMedical"
        }
        if (!e.isWithOperatePermission(f)) {
            e.alert("对不起，您没有权限，请联系管理员！");
            return
        }
        c.newFiles = [];
        c.currentMedicalRecord = e.convertToViewModel(h);
        b.showMedicalRecord(c.currentMedicalRecord);
        if (!c.CatalogItems) {
            e.getCatalogItems(c, 2)
        }
        var g = {
            TenantID: c.currentPatient.TenantID,
            SubCategoryID: c.currentItem.MedicalDetail.Appointment.SubCategoryID
        };
        e.getMedicalAdvices(g, c)
    };
    c.getAdviceContent = function () {
        if (c.currentPatient && c.selectedAdviceTemplate && c.selectedAdviceTemplate.Name) {
            var f = {TenantID: c.currentPatient.TenantID, AdviceItemID: c.selectedAdviceTemplate.AdviceItemID};
            e.getAdviceContent(f, c)
        } else {
            c.currentMedicalRecord.Advice = ""
        }
    };
    c.convertToPayType = function (f) {
        switch (f.PaymentCategory) {
            case 1:
                return "现金";
            case 2:
                return "银行卡";
            case 3:
                return "微信";
            case 4:
                return "支付宝";
            case 5:
                return "社保卡";
            case 6:
                return "会员卡";
            case 7:
                return "账户";
            case 8:
                return "其他";
            case 9:
                return "账单退款";
            default:
                return "无"
        }
    };
    c.showFeeRecordDetail = function (g, f) {
        if (f == 0) {
            g.IsShowCostDetail = false;
            g.IsShowDetail = false;
            if (g.IsShowBillDetail) {
                g.IsShowBillDetail = false
            } else {
                g.IsShowBillDetail = true
            }
        }
        if (f == 1) {
            if (g.IsShowCostDetail) {
                g.IsShowCostDetail = false
            } else {
                g.IsShowCostDetail = true
            }
        }
        if (f == 2) {
            if (g.IsShowDetail) {
                g.IsShowDetail = false
            } else {
                g.IsShowDetail = true
            }
        }
    };
    c.closeTooth = function () {
        $("#tooth").fadeOut()
    };
    c.showDetail = function (q, p, o) {
        $("#cd-timeline div.content_item").removeClass("content_item_active");
        if (o != "" && $(o.target).attr("class").indexOf("content_item_active") < 0) {
            $(o.target).addClass("content_item_active")
        }
        switch (p) {
            case 1:
                $("#show_detail").children().remove();
                $("#add_new_item").children().remove();
                c.currentItem = {DataTitle: "就诊信息", AppointDetail: q.Appoint};
                var k = angular.element("<a href='javascript:void(0);' class='icon-plus' ng-click='addNewReservation();'></a>");
                var n = d(k)(c);
                var j = angular.element("<div class='div_row'><span class='first_col_span'>就诊时间：</span><span class='second_col_span' style='width: 50%;'>{{currentItem.AppointDetail.Appoint.BeginTime}}</span></div><div class='div_row'><span class='first_col_span'>就诊事项：</span><span class='second_col_span'>{{currentItem.AppointDetail.Appoint.AppointItemName}}</span><span class='first_col_span'>就诊类型：</span><span class='second_col_span'>{{currentItem.AppointDetail.Appoint.AppointTypeName}}</span></div><div class='div_row'><span class='first_col_span'>就诊医生：</span><span class='second_col_span'>{{currentItem.AppointDetail.Appoint.DoctorName}}</span></div><div class='row row_space'><hr style='border:1px dashed skyblue;border-bottom:0;border-right:0;border-left:0;width:100%;'/> </div><div class='div_row'><span>账单列表</span>（<span class='icon-plus cus_color_profit'></span>：收费，<span class='icon-minus cus_color_refund'></span>：退费）</div><div class='div_row'><div ng-repeat='item in currentItem.AppointDetail.Bills | orderBy: &quot;-CreateTime&quot;' class='cus_bill_out'><div class='fee_record_title' ng-click='showFeeRecordDetail(item, 0);'><span ng-bind='$index+1'></span>.&nbsp;<span>账单号：</span><span ng-bind='item.Bill.BillNoStr'></span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span>应收金额：</span><span ng-bind='item.Bill.DueCharge | currency: &quot;￥&quot;'></span>，<span>实收金额：</span><span ng-bind='item.Bill.RealCharge | currency: &quot;￥&quot;'></span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span>账单状态：</span><span ng-if='item.Bill.BillStatus == 1' class='cus_bill_waiting_font_color'>待收费</span><span ng-if='item.Bill.BillStatus == 2' class='cus_bill_arrears_font_color'>欠费</span><span ng-if='item.Bill.BillStatus == 3' class='cus_bill_canceled_font_color'>已作废</span><span ng-if='item.Bill.BillStatus == 4' class='cus_bill_completed_font_color'>已完成</span><span ng-class='{&quot;icon-chevron-down down_icon&quot;: !item.IsShowBillDetail, &quot;icon-chevron-up down_icon&quot;: item.IsShowBillDetail}'></span></div><div class='fee_record' ng-click='showFeeRecordDetail(item, 1);' ng-show='item.IsShowBillDetail'>&nbsp;&nbsp;&nbsp;&nbsp;<span style='color:darkgray;'>收费项目</span><span ng-class='{&quot;icon-chevron-down down_icon&quot;: !item.IsShowCostDetail, &quot;icon-chevron-up down_icon&quot;: item.IsShowCostDetail}'></span></div><div style='background-color: ghostwhite;' ng-show='item.IsShowCostDetail'><table style='width: 100%'><thead><tr class='cus_table_row'><td class='txtCenter'>名称</td><td class='txtCenter'>应收金额</td><td class='txtCenter'>备注</td></tr></thead><tbody><tr ng-repeat='costItem in item.Costs' class='cus_table_row'><td class='txtCenter' ng-if='costItem.CostItem == null' ng-bind='costItem.CategoryName'></td><td class='txtCenter' ng-if='costItem.CostItem != null' ng-bind='costItem.CostItem'></td><td class='txtCenter'><span class='cus_color_profit' ng-bind='costItem.DiscountPrice | currency: &quot;￥&quot;'></span></td><td class='txtCenter'><span ng-bind='costItem.Remark'></span></td></tr></tbody></table></div><div class='fee_record' ng-click='showFeeRecordDetail(item, 2);' ng-show='item.IsShowBillDetail'>&nbsp;&nbsp;&nbsp;&nbsp;<span style='color:darkgray;'>缴费记录</span><span ng-class='{&quot;icon-chevron-down down_icon&quot;: !item.IsShowDetail, &quot;icon-chevron-up down_icon&quot;: item.IsShowDetail}'></span></div><div style='background-color: ghostwhite;' ng-show='item.IsShowDetail'><table style='width: 100%'><thead><tr class='cus_table_row'><td class='txtCenter'>操作人</td><td class='txtCenter'>操作金额</td><td class='txtCenter'>找零</td><td class='txtCenter'>操作方式</td><td class='txtCenter'>操作时间</td></tr></thead><tbody><tr ng-repeat='h in item.Histories' class='cus_table_row'><td class='txtCenter'><span ng-bind='h.PayeeName'></span></td><td class='txtCenter'><span class='cus_color_refund' ng-if='h.PaymentType != 1'>-</span><span ng-class='{&quot;cus_color_profit&quot;: h.PaymentType == 1, &quot;cus_color_refund&quot;: h.PaymentType != 1}' ng-bind='h.Amount | currency: &quot;￥&quot;'></span></td><td class='txtCenter'><span ng-bind='h.Change | currency: &quot;￥&quot;'></span></td><td class='txtCenter'><span ng-bind='convertToPayType(h)'></span></td><td class='txtCenter'><span ng-bind='h.CreateTime'></span></td></tr></tbody></table></div></div></div>");
                var m = d(j)(c);
                angular.element($("#show_detail")).append(m);
                break;
            case 2:
                $("#show_detail").children().remove();
                $("#add_new_item").children().remove();
                c.currentItem = {DataTitle: "电子病案", MedicalDetail: q.Medical};
                c.docTotalCount = (c.currentItem.MedicalDetail.TreatFileList != null ? c.currentItem.MedicalDetail.TreatFileList.length : 0);
                var g = 0;
                var h = 0;
                var f = 0;
                e.calculateDocCount(c, c.currentItem.MedicalDetail.TreatFileList);
                if (c.docTotalCount > 0) {
                    for (var l = 0; l < c.currentItem.MedicalDetail.TreatFileList.length; l++) {
                        if (c.currentItem.MedicalDetail.TreatFileList[l].FileType == 1) {
                            c.currentItem.MedicalDetail.TreatFileList[l].imgSrc = FileURL + "Image/" + c.currentItem.MedicalDetail.TreatFileList[l].FileName;
                            g++
                        }
                        if (c.currentItem.MedicalDetail.TreatFileList[l].FileType == 2) {
                            h++
                        }
                        if (c.currentItem.MedicalDetail.TreatFileList[l].FileType == 3) {
                            f++
                        }
                    }
                }
                c.MedicalContent = e.convertToViewModel(c.currentItem.MedicalDetail);
                var j = angular.element("<div class='div_row'><span class='first_col_span'>就诊时间：</span><span class='second_col_span' style='width: 50%;'>{{currentItem.MedicalDetail.Appointment.BeginTime}}</span></div><div class='div_row'><span class='first_col_span'>就诊事项：</span><span class='second_col_span'>{{currentItem.MedicalDetail.Appointment.AppointItemName}}</span><span class='first_col_span'>就诊医生：</span><span class='second_col_span'>{{currentItem.MedicalDetail.Appointment.DoctorName}}</span></div><div class='row row_space'><hr style='border:1px dashed #9999CC;border-bottom:0;border-right:0;border-left:0;width:100%;'/> </div><div class='div_row'><span>病案内容</span></div><div class='div_row'><span class='first_col_span med_h cus_float_lf'>主诉：</span><span class='cus_span_scroll second_col_span' style='width: 75%;'>{{currentItem.MedicalDetail.Treat.ChiefComplaints}}</span></div><div class='div_row'><span class='first_col_span med_h cus_float_lf'>现病史：</span><span class='cus_span_scroll second_col_span' style='width: 75%;'>{{currentItem.MedicalDetail.Treat.PresentIllness}}</span></div><div class='div_row'><span class='first_col_span med_h cus_float_lf'>既往史：</span><span class='cus_span_scroll second_col_span' style='width: 75%;'>{{currentItem.MedicalDetail.Treat.PastHistory}}</span></div><div class='div_row'><span class='first_col_span med_h cus_float_lf'>过敏史：</span><span class='cus_span_scroll second_col_span' style='width: 75%;'>{{currentItem.MedicalDetail.Treat.AllergyHistory}}</span></div><div class='div_row'><table class='table table-bordered cus_div'><tbody><tr class='md_check' ng-repeat='item in MedicalContent.CheckItems'><td><div class='col-lg-12'>{{item.ItemName}}</div></td><td class='cus_tr'><div class='div_outer_tooth_1'><input type='hidden' class='tooth_type' value='1'/><div class='div_top_left'><span>&nbsp;</span><span ng-repeat='toothItem in item.TeethList.TopLeft' class='selected_tooth selected_tooth_right'>{{toothItem.value}}</span></div><div class='div_top_right'><span>&nbsp;</span><span ng-repeat='toothItem in item.TeethList.TopRight' class='selected_tooth selected_tooth_left'>{{toothItem.value}}</span></div><br><div class='div_bottom_left'><span>&nbsp;</span><span ng-repeat='toothItem in item.TeethList.BottomLeft' class='selected_tooth selected_tooth_right'>{{toothItem.value}}</span></div><div class='div_bottom_right'><span>&nbsp;</span><span ng-repeat='toothItem in item.TeethList.BottomRight' class='selected_tooth selected_tooth_left'>{{toothItem.value}}</span></div></div></td><td class='sec_td'><textarea name='jianchaContent' type='text' class='form-control cus_textArea' placeholder='检查' ng-model='item.DetailContent' readonly='true'>{{item.DetailContent}}</textarea></td></tr><tr class='md_help_check' ng-repeat='item in MedicalContent.HelpCheckItems'><td><div class='col-lg-12'>{{item.ItemName}}</div></td><td class='cus_tr'><div class='div_outer_tooth_1'><input type='hidden' class='tooth_type' value='1'/><div class='div_top_left'><span>&nbsp;</span><span ng-repeat='toothItem in item.TeethList.TopLeft' class='selected_tooth selected_tooth_right'>{{toothItem.value}}</span></div><div class='div_top_right'><span>&nbsp;</span><span ng-repeat='toothItem in item.TeethList.TopRight' class='selected_tooth selected_tooth_left'>{{toothItem.value}}</span></div><br><div class='div_bottom_left'><span>&nbsp;</span><span ng-repeat='toothItem in item.TeethList.BottomLeft' class='selected_tooth selected_tooth_right'>{{toothItem.value}}</span></div><div class='div_bottom_right'><span>&nbsp;</span><span ng-repeat='toothItem in item.TeethList.BottomRight' class='selected_tooth selected_tooth_left'>{{toothItem.value}}</span></div></div></td><td class='sec_td'><textarea name='fuzhujiancha' type='text' class='form-control cus_textArea' placeholder='辅助检查' ng-model='item.DetailContent' readonly='true'>{{item.DetailContent}}</textarea></td></tr><tr class='md_diagnose' ng-repeat='item in MedicalContent.DiagnoseItems'><td><div class='col-lg-12'>{{item.ItemName}}</div></td><td class='cus_tr'><div class='div_outer_tooth_1'><input type='hidden' class='tooth_type' value='1'/><div class='div_top_left'><span>&nbsp;</span><span ng-repeat='toothItem in item.TeethList.TopLeft' class='selected_tooth selected_tooth_right'>{{toothItem.value}}</span></div><div class='div_top_right'><span>&nbsp;</span><span ng-repeat='toothItem in item.TeethList.TopRight' class='selected_tooth selected_tooth_left'>{{toothItem.value}}</span></div><br><div class='div_bottom_left'><span>&nbsp;</span><span ng-repeat='toothItem in item.TeethList.BottomLeft' class='selected_tooth selected_tooth_right'>{{toothItem.value}}</span></div><div class='div_bottom_right'><span>&nbsp;</span><span ng-repeat='toothItem in item.TeethList.BottomRight' class='selected_tooth selected_tooth_left'>{{toothItem.value}}</span></div></div></td><td class='sec_td'><textarea name='zhenduanContent' type='text' class='form-control cus_textArea' placeholder='诊断' ng-model='item.DetailContent' readonly='true'>{{item.DetailContent}}</textarea></td></tr><tr class='md_treat' ng-repeat='item in MedicalContent.TreatItems'><td><div class='col-lg-12'>{{item.ItemName}}</div></td><td class='cus_tr'><div class='div_outer_tooth_1'><input type='hidden' class='tooth_type' value='1'/><div class='div_top_left'><span>&nbsp;</span><span ng-repeat='toothItem in item.TeethList.TopLeft' class='selected_tooth selected_tooth_right'>{{toothItem.value}}</span></div><div class='div_top_right'><span>&nbsp;</span><span ng-repeat='toothItem in item.TeethList.TopRight' class='selected_tooth selected_tooth_left'>{{toothItem.value}}</span></div><br><div class='div_bottom_left'><span>&nbsp;</span><span ng-repeat='toothItem in item.TeethList.BottomLeft' class='selected_tooth selected_tooth_right'>{{toothItem.value}}</span></div><div class='div_bottom_right'><span>&nbsp;</span><span ng-repeat='toothItem in item.TeethList.BottomRight' class='selected_tooth selected_tooth_left'>{{toothItem.value}}</span></div></div></td><td class='sec_td'><textarea name='zhiliaoContent' type='text' class='form-control cus_textArea' placeholder='治疗' ng-model='item.DetailContent' readonly='true'>{{item.DetailContent}}</textarea></td></tr></tbody></table></div><div class='row row_space'><hr style='border:1px dashed #9999CC;border-bottom:0;border-right:0;border-left:0;width:100%;'/> </div><div class='div_row'><span>影像资料</span></div><div class='div_row'><span class='first_col_span'>资料总数：</span><span class='sec_col'>{{docTotalCount}}个 （图片文件{{imgCount}}个，视频文件{{vedioCount}}个, 文本文件{{textCount}}个）</span></div><div class='div_row txt_cen'><div class='video_span bell_item_w_6'><div id='myCarousel' class='video_list carousel slide'><div class='carousel-inner' style='height:100%;'><div ng-class='{&#39item active video_unit&#39: $first,&#39item video_unit&#39:!$first}' style='height:100%;' ng-repeat='item in currentItem.MedicalDetail.TreatFileList'><div ng-if='item.FileType != 1'><div class='row_space'><span class='first_col'>文件名称：</span><span class='sec_col'>{{item.SourceName}}</span></div><div class='row_space'><span class='first_col'>文件类型：</span><span class='sec_col'>{{item.FileTypeName}}</span></div><div class='row_space'></div><div class='row_space'><span class='first_col'>文件描述：</span><span class='sec_col'>{{item.Description}}</span></div><div class='row_space'><span class='first_col'>上传时间：</span><span class='sec_col'>{{item.CreateTime}}</span></div></div><div ng-if='item.FileType == 1' style='height:100%;'><span style='display: block; width: 100%;height: 80%;overflow:hidden;'><img ng-src='{{item.imgSrc}}' alt='暂无图片' style='width:70%;'></span><span style='display: block;white-space:nowrap;'>文件名称：{{item.SourceName}}</span></div></div></div><a class='carousel-control left' href='#myCarousel' data-slide='prev'>&lsaquo;</a><a class='carousel-control right' href='#myCarousel' data-slide='next'>&rsaquo;</a></div></div></div><div class='row row_space'><hr style='border:1px dashed #9999CC;border-bottom:0;border-right:0;border-left:0;width:100%;'/> </div><div class='div_row'><span>医嘱信息</span></div><div class='div_row'><span class='first_col_span med_h cus_float_lf'>医嘱内容：</span><span style='display:inline-block; width: 75%;height: 100px;'><textarea style='height:100%;' ng-bind='currentItem.MedicalDetail.Treat.Advice' class='form-control' readonly></textarea></span></div></div>");
                var m = d(j)(c);
                angular.element($("#show_detail")).append(m);
                break;
            case 3:
                $("#show_detail").children().remove();
                $("#add_new_item").children().remove();
                c.currentItem = {DataTitle: "回访信息", VisitDetail: q.Visit};
                var k = angular.element("<a href='javascript:void(0);' class='icon-plus' ng-click='addNewVisit();'></a>");
                var n = d(k)(c);
                var j = angular.element("<div class='div_row'><span class='first_col_span'>回访时间：</span><span class='second_col_span_big' ng-bind='currentItem.VisitDetail.VisitTime'></span></div><div class='div_row'><span class='first_col_span'>回访事项：</span><span class='second_col_span_big' ng-bind='currentItem.VisitDetail.VisitItemName'></span></div><div class='div_row'><span class='first_col_span'>回访人员：</span><span class='second_col_span' ng-bind='currentItem.VisitDetail.VisitorName'></span></div><div class='div_row'><span class='first_col_span'>回访内容：</span><span class='visit_span'><textarea disabled ng-bind='currentItem.VisitDetail.VisitContent'></textarea></span></div><div class='div_row'><span class='first_col_span'>回访结果：</span><span class='visit_span'><textarea disabled ng-bind='currentItem.VisitDetail.VisitResult'></textarea></span></div><div  class='div_row'><span class='first_col_span'>回访备注：</span><span class='visit_span'><textarea disabled ng-bind='currentItem.VisitDetail.Remark'></textarea></span></div></div>");
                var m = d(j)(c);
                angular.element($("#show_detail")).append(m);
                break;
            default:
                c.currentItem = {DataTitle: "暂无信息"};
                break
        }
    };
    c.convertGender = function (g) {
        var f = 0;
        f = g.Type ? g.Type : g;
        switch (f) {
            case 1:
                return "男";
            case 2:
                return "女";
            default:
                return "无"
        }
    };
    c.convertInsuranceType = function (f) {
        switch (f) {
            case"0":
                return "其他";
            case"1":
                return "人寿保险";
            case"2":
                return "健康保险";
            case"3":
                return "人身意外伤害保险";
            default:
                return ""
        }
    };
    c.createTree = function (n, p) {
        var f = "";
        var m = {};
        var r = {
            context1: {
                elements: [{
                    text: "展开", icon: "icon-star-empty", action: function (i) {
                        i.expandNode()
                    }
                }, {
                    text: "收缩", icon: "icon-star-empty", action: function (i) {
                        i.collapseNode()
                    }
                }]
            }
        };
        var g = function (j, i, u) {
            e.getDetailCatalog(j, i, u)
        };
        var o = function (j, i, u) {
            e.getMedicalItems(j, i, u)
        };
        switch (p) {
            case 1:
                m = g;
                f = "ItemTree";
                break;
            case 2:
                m = o;
                f = "advice_tree";
                break;
            default:
                break
        }
        if (n != undefined && n != null) {
            c.tree = createTree(f, "white", r);
            for (var l = 0; l < n.length; l++) {
                var t = c.tree.createNode(n[l].Category.Name, false, "icon-folder-close-alt", null, null, "context1", JSON.stringify(n[l]), 1);
                for (var h = 0; h < n[l].SubCategories.length; h++) {
                    var q = n[l].SubCategories[h];
                    var k = JSON.stringify(q);
                    var s = t.createChildNode(n[l].SubCategories[h].Name, false, "icon-folder-close-alt", null, "context2", JSON.stringify(n[l].SubCategories[h]), 2, function (u, j) {
                        var i = $.parseJSON(u);
                        m(c, i, j)
                    })
                }
            }
        }
        c.tree.drawTree()
    };
    c.print = function (g, f) {
        if (f) {
            if (c.selectedAgreement) {
                $.print("#" + g)
            } else {
                e.alert("请先选择协议书！")
            }
        }
        if (!f && g) {
            $.print("#" + g)
        }
    };
    c.previewAgreement = function () {
        b.previewAgreement(c)
    };
    c.closeAgreement = function () {
        b.closeAgreement(c)
    };
    c.downloadAgreement = function () {
        if (c.selectedAgreement) {
            window.location.href = FileURL + "Agreement/" + c.selectedAgreement.DocName
        } else {
            e.alert("请先选择协议书！")
        }
    };
    c.recordCurrentItem = function (f, g, h) {
        c.currentDom = {DomObj: angular.element(f.target), ContentType: g, IsOld: h}
    };
    c.initialize()
}]);
PatientDetailMG.init();