var ClinicMGData = {};
var GenderList = [{Name: "请选择性别", Type: 0}, {Name: "男", Type: 1}, {Name: "女", Type: 2}];
var PosList = [{Type: 1, Name: "主任"}, {Type: 2, Name: "主治医师"}, {Type: 3, Name: "护士长"}, {Type: 4, Name: "其他"}];
var ClinicMG = {
    validateRequired: function (b, a) {
        if (!CommonFun.checkFormat(b, DataTypeEnum.Required)) {
            return "此项为必填项！"
        } else {
            return true
        }
    }, validateEmail: function (b, a) {
        if (!CommonFun.checkFormat(b, DataTypeEnum.Email)) {
            return "邮箱格式不对，请重新输入！"
        } else {
            return true
        }
    }, validateContract: function (b, a) {
        if (!CommonFun.checkFormat(b, DataTypeEnum.Contract) && !CommonFun.checkFormat(b, DataTypeEnum.Mobile)) {
            return "电话格式不对，请重新输入！"
        } else {
            return true
        }
    }, validateGender: function (b, a) {
        if (b == "number:0" || b == "0") {
            return "请选择性别"
        } else {
            return true
        }
    }, validatePhone: function (b, a) {
        if (!CommonFun.checkFormat(b, DataTypeEnum.PhoneMobile)) {
            return "手机号格式不对，请重新输入！"
        } else {
            return true
        }
    }, validateDate: function (b, a) {
        if (!CommonFun.checkFormat(b, DataTypeEnum.DateFormat)) {
            return "日期格式不对，请重新输入！"
        } else {
            return true
        }
    }, validateOldPassword: function (c, b) {
        if (c == "" || c == null) {
            return "请输入旧密码！"
        }
        var a = CommonFun.getDataFromSession("CurrentUser");
        if (a.Body.Tenant.Password != c) {
            return "旧密码不正确，请重新输入！"
        } else {
            return true
        }
    }, validateNewPassword: function (c, a) {
        if (c == "" || c == null) {
            return "请输入密码"
        }
        var b = $($("#password_MG input[name='confirmPassword']")[0]).val();
        if (c != b) {
            return "两次密码输入不一致，请重新输入！"
        }
        return true
    }, validateJobTitle: function (b, a) {
        if (b == "number:0" || b == "") {
            return "请选择职位"
        } else {
            return true
        }
    }, validateJobRoleID: function (b, a) {
        if (b == "number:0" || b == "") {
            return "请选择职称"
        } else {
            return true
        }
    }, validateEquipContact: function (b, a) {
        if ($("#new_equipment input[name='equipContact']").val() != "") {
            if (!CommonFun.checkFormat(b, DataTypeEnum.Contract) && !CommonFun.checkFormat(b, DataTypeEnum.PhoneMobile)) {
                return "电话格式不对，请重新输入！"
            } else {
                return true
            }
        }
    }, validateQuantity: function (b, a) {
        if ($("#new_equipment input[name='Quantity']").val() != "") {
            if (!CommonFun.checkFormat(b, DataTypeEnum.Number)) {
                return "请输入数字"
            } else {
                return true
            }
        } else {
            return "此项为必填项！";
        }
    }, init: function () {
        $("#loading_div").modal("show");
        MenuActive.setActive(MenuEnum.ClinicMG);
        CommonFun.bindingDateControl("em_birth", new Date(), "", false);
        CommonFun.bindingDateControl("equipDate", new Date(), "", false);
        CommonFun.bindingDateControl("outEquipDate", new Date(), "", false);
        CommonFun.bindingDateControl("setEquipDate", new Date(), "", false);
        CommonFun.bindingDateControl("inEquipData", new Date(), "", false);
        CommonFun.bindingDateControl("warrantyData", "", new Date(), false);
        $.formValidator.initConfig({validatorGroup: "1", mode: "AlertTip"});
        $($("#edit_name").children()[0]).formValidator({validatorGroup: "1"}).functionValidator({fun: ClinicMG.validateRequired});
        $($("#edit_profile").children()[0]).formValidator({validatorGroup: "1"}).functionValidator({fun: ClinicMG.validateRequired});
        $($("#edit_authentication").children()[0]).formValidator({validatorGroup: "1"}).functionValidator({fun: ClinicMG.validateRequired});
        $($("#edit_address").children()[0]).formValidator({validatorGroup: "1"}).functionValidator({fun: ClinicMG.validateRequired});
        $($("#edit_contractor").children()[0]).formValidator({validatorGroup: "1"}).functionValidator({fun: ClinicMG.validateRequired});
        $($("#edit_contractorPhone").children()[0]).formValidator({validatorGroup: "1"}).functionValidator({fun: ClinicMG.validatePhone});
        $($("#edit_email").children()[0]).formValidator({validatorGroup: "1"}).functionValidator({fun: ClinicMG.validateEmail});
        $($("#edit_bookPhone").children()[0]).formValidator({validatorGroup: "1"}).functionValidator({fun: ClinicMG.validateContract});
        $.formValidator.initConfig({validatorGroup: "2", mode: "AlertTip"});
        $($("#new_employee input[name='empName']")[0]).formValidator({validatorGroup: "2"}).functionValidator({fun: ClinicMG.validateRequired});
        $($("#new_employee input[name='empPassword']")[0]).formValidator({validatorGroup: "2"}).functionValidator({fun: ClinicMG.validateRequired});
        $($("#new_employee select[name='checkGender']")[0]).formValidator({validatorGroup: "2"}).functionValidator({fun: ClinicMG.validateGender});
        $($("#new_employee input[name='empMobile']")[0]).formValidator({validatorGroup: "2"}).functionValidator({fun: ClinicMG.validatePhone});
        $($("#new_employee select[name='JobTitle']")[0]).formValidator({validatorGroup: "2"}).functionValidator({fun: ClinicMG.validateJobTitle});
        $($("#new_employee select[name='JobRoleID']")[0]).formValidator({validatorGroup: "2"}).functionValidator({fun: ClinicMG.validateJobRoleID});
        $.formValidator.initConfig({validatorGroup: "3", mode: "AlertTip"});
        $($("#password_MG input[name='oldPassword']")[0]).formValidator({validatorGroup: "3"}).functionValidator({fun: ClinicMG.validateOldPassword});
        $($("#password_MG input[name='newPassword']")[0]).formValidator({validatorGroup: "3"}).functionValidator({fun: ClinicMG.validateNewPassword});
        $.formValidator.initConfig({validatorGroup: "4", mode: "AlertTip"});
        $($("#new_role input[name='roleName']")[0]).formValidator({validatorGroup: "4"}).functionValidator({fun: ClinicMG.validateRequired});
        $.formValidator.initConfig({validatorGroup: "5", mode: "AlertTip"});
        $($("#new_type input[name='equipmentCategoryName']")[0]).formValidator({validatorGroup: "5"}).functionValidator({fun: ClinicMG.validateRequired});
        $.formValidator.initConfig({validatorGroup: "6", mode: "AlertTip"});
        $($("#new_equipment input[name='equipmentName']")[0]).formValidator({validatorGroup: "6"}).functionValidator({fun: ClinicMG.validateRequired});
        $($("#new_equipment select[name='CategoryType']")[0]).formValidator({validatorGroup: "6"}).functionValidator({fun: ClinicMG.validateRequired});
        $($("#new_equipment select[name='equipmentUser']")[0]).formValidator({validatorGroup: "6"}).functionValidator({fun: ClinicMG.validateRequired});
        $($("#new_equipment input[name='equipContact']")[0]).formValidator({validatorGroup: "6"}).functionValidator({fun: ClinicMG.validateEquipContact});
        $($("#new_equipment input[name='Quantity']")[0]).formValidator({validatorGroup: "6"}).functionValidator({fun: ClinicMG.validateQuantity})
    }
};
ClinicMG.init();
var clinicModule = angular.module("ClinicModule", ["HttpModule", "PermissionModule"]);
clinicModule.factory("EmployeeFactory", [function () {
    var b = new Date();
    var a = b.getFullYear() + "-" + (b.getMonth() + 1) + "-" + b.getDate() + " " + b.getHours() + ":" + b.getMinutes() + ":" + b.getSeconds();
    return {
        MappingEmployee: function (d) {
            var c = {};
            if (d != null && d != "") {
                c = {
                    ID: d.ID,
                    Birthday: !d.Birthday ? "" : new Date(d.Birthday).Format("yyyy-MM-dd"),
                    CreateTime: d.CreateTime == undefined ? a : d.CreateTime,
                    Email: d.Email,
                    Gender: d.Gender,
                    IP: d.IP,
                    LastLoginTime: d.LastLoginTime,
                    LoginState: d.LoginState,
                    Mobile: d.Mobile,
                    Password: d.Password,
                    RoleID: d.RoleID,
                    State: d.State,
                    TenantID: d.TenantID,
                    UserID: d.UserID,
                    UserName: d.UserName,
                    JobTitle: d.JobTitle
                }
            }
            return c
        }, DealResponseEmployeeData: function (d) {
            var c;
            if ($.isArray(d) && d != undefined && d != "" && d.length > 0) {
                c = [];
                for (var e = 0; e < d.length; e++) {
                    var f = {};
                    f = d[e].User;
                    f.Role = d[e].Role;
                    f.GenderName = GenderList[f.Gender].Name;
                    if (f.Birthday != null && f.Birthday != "") {
                        f.Age = CommonFun.calculateAge(new Date(f.Birthday).Format("yyyy-MM-dd"))
                    } else {
                        f.Age = ""
                    }
                    f.PosName = !f.JobTitle ? "无职称" : PosList[f.JobTitle - 1].Name;
                    f.RoleName = f.Role != null ? f.Role.RoleName : "";
                    c.push(f)
                }
            }
            if (!$.isArray(d) && d != "" && d != null) {
                var f = {};
                f = d.User;
                f.Role = d.Role;
                f.GenderName = GenderList[f.Gender].Name;
                f.Age = CommonFun.calculateAge(new Date(f.Birthday).Format("yyyy-MM-dd"));
                f.PosName = d.JobTitle == 0 ? "无职称" : PosList[d.JobTitle - 1].Name;
                c = f
            }
            return c
        }, GetEmployeeWithOutRole: function (e, d, h) {
            var c = [];
            if (e != undefined && e != null && e.length > 0) {
                for (var f = 0; f < e.length; f++) {
                    if (e[f].Role == null || e[f].Role == "") {
                        var g = e[f];
                        g.IsChecked = false;
                        c.push(e[f])
                    } else {
                        if (!d && e[f].Role.RoleID == h.Role.RoleID) {
                            e[f].IsChecked = true;
                            c.push(e[f])
                        }
                    }
                }
            }
            return c
        }
    }
}]);
clinicModule.service("EmployeeService", ["$http", "HttpService", "ResourceFactory", "EmployeeFactory", function (e, c, b, d) {
    var a = {};
    a.getMappingEmployee = function (f) {
        return d.MappingEmployee(f)
    };
    a.getEmployeeList = function (f) {
        return d.DealResponseEmployeeData(f)
    };
    a.getRoleList = function (f) {
        var g = {
            RoleName: "",
            IsNeedAuth: 0,
            TenantID: CommonFun.getDataFromSession("CurrentUser").Body.Tenant.TenantID
        };
        try {
            c.roleRequest(g, b.operateCode.get, function (i) {
                if (i.Header.StatusCode == 0) {
                    f.roleListWithoutPermission = i.Body
                } else {
                    a.alert(GetErrormsg(i.Header.StatusCode))
                }
            }, function (i) {
                a.alert("服务器繁忙，请稍候再试！");
                console.log(i)
            })
        } catch (h) {
            console.log(h)
        }
    };
    a.searchEmployee = function (h, f) {
        var g;
        if (h != "" && h != null && h != undefined) {
            g = {
                TenantId: CommonFun.getDataFromSession("CurrentUser").Body.Tenant.TenantID,
                SearchType: !CommonFun.checkFormat(h.Condition, DataTypeEnum.Number) ? 1 : 2,
                Condition: h.Condition,
                IsNeedRole: 1
            };
            if (h.Condition == "" || h.Condition == null) {
                g.SearchType = 0
            }
        } else {
            g = {
                TenantId: CommonFun.getDataFromSession("CurrentUser").Body.Tenant.TenantID,
                SearchType: 0,
                Condition: "",
                IsNeedRole: 1
            }
        }
        try {
            c.employeeRequest(g, b.operateCode.get, function (j) {
                $("#loading_div").modal("hide");
                $(".body_hide").css("opacity", "1");
                if (j.Header.StatusCode == 0) {
                    f.employeeList = d.DealResponseEmployeeData(j.Body)
                } else {
                    a.alert(GetErrormsg(j.Header.StatusCode))
                }
            }, function (j) {
                a.alert("系统繁忙，请稍后重试！");
                console.log(j)
            })
        } catch (i) {
            console.log(i)
        } finally {
        }
    };
    a.addNewEmployee = function (f) {
        var i = (f.operateType == 0 ? b.operateCode.insert : b.operateCode.update);
        var g = f.currentEmployee;
        if (f.operateType == 0) {
            g.ID = 0;
            g.UserID = 0
        }
        g.TenantID = CommonFun.getDataFromSession("CurrentUser").Body.Tenant.TenantID;
        try {
            c.employeeRequest(g, i, function (j) {
                if (j.Header.StatusCode == 0) {
                    $("#new_employee").modal("hide");
                    var k = "员工信息更新成功！";
                    if (f.operateType == 0) {
                        k = "新增员工成功！"
                    }
                    a.alert(k);
                    a.searchEmployee("", f)
                } else {
                    a.alert(GetErrormsg(j.Header.StatusCode))
                }
            }, function (j) {
                a.alert("系统繁忙，请稍后重试！");
                console.log(j)
            })
        } catch (h) {
            console.log(h)
        } finally {
        }
    };
    a.deleteCurrentEmployee = function (g, f) {
        var h = f;
        h.TenantID = CommonFun.getDataFromSession("CurrentUser").Body.Tenant.TenantID;
        h.State = 1;
        try {
            c.employeeRequest(h, b.operateCode.remove, function (j) {
                if (j.Header.StatusCode == 0) {
                    a.searchEmployee("", g)
                } else {
                    a.alert(GetErrormsg(j.Header.StatusCode))
                }
            }, function (j) {
                console.log(j);
                a.alert("系统繁忙，请稍后再试！")
            })
        } catch (i) {
            console.log(i)
        } finally {
        }
    };
    a.getEmployeesWithoutRole = function (g, f, h) {
        a.searchEmployee("", g);
        g.roleEmployeeList = d.GetEmployeeWithOutRole(g.employeeList, f, h)
    };
    a.confirm = function (g, h, f) {
        b.MsgBox.Confirm("温馨提示", g, h, f)
    };
    a.alert = function (f) {
        b.MsgBox.Alert("消息", f)
    };
    return a
}]);
clinicModule.factory("RoleFactory", [function () {
    return {
        RoleList: "", PermissionList: "", MappingRole: function (b) {
            var a = {};
            if (b != undefined && b != "" && b != null) {
                a = {
                    ID: b.Role.ID,
                    RoleID: b.Role.RoleID,
                    RoleName: b.Role.RoleName,
                    IsAppoint: b.Role.IsAppoint,
                    CreateTime: b.Role.CreateTime,
                    Description: b.Role.Description,
                    State: b.Role.State
                }
            }
            return a
        }, DealRequestRole: function (n, g, e) {
            var f = 0;
            var h = {};
            var k = [];
            var l = [];
            var b = CommonFun.getDataFromSession("CurrentUser").Body.Tenant;
            if (n != null && n != "") {
                h = {
                    ID: n.ID,
                    TenantID: b != null ? b.TenantID : "",
                    Description: n.Description,
                    RoleName: n.RoleName,
                    IsAppoint: n.IsAppoint,
                    RoleID: n.RoleID,
                    CreateTime: n.CreateTime,
                    State: n.State
                };
                for (var d = 0; d < e.length; d++) {
                    var a = 0;
                    var m = {};
                    if (e[d].isOwned) {
                        f++;
                        m = {
                            ID: e[d].Auth ? e[d].Auth.ID : 0,
                            RoleID: e[d].Auth ? e[d].Auth.RoleID : "",
                            ModuleID: e[d].Module.ModuleID,
                            ModuleAuthID: "",
                            State: e[d].Auth ? e[d].Auth.State : 0,
                            TenantID: b != null ? b.TenantID : "",
                            Auth: e[d].Auth ? e[d].Auth.Auth : 0
                        };
                        if (e[d].Auths.length > 0) {
                            for (var c = 0; c < e[d].Auths.length; c++) {
                                if (e[d].Auths[c].IsChecked) {
                                    a = a | e[d].Auths[c].AuthValue
                                }
                            }
                        }
                        m.Auth = a;
                        k.push(m)
                    } else {
                        k.push({
                            ID: e[d].Auth ? e[d].Auth.ID : 0,
                            RoleID: e[d].Auth ? e[d].Auth.RoleID : "",
                            ModuleID: e[d].Module.ModuleID,
                            ModuleAuthID: "",
                            State: e[d].Auth ? e[d].Auth.State : 0,
                            TenantID: b != null ? b.TenantID : "",
                            Auth: 0
                        })
                    }
                }
                if (n.State != 1 && f <= 0) {
                    return ""
                }
                if (g != undefined && g != "" && g != null && g.length > 0) {
                    for (var c = 0; c < g.length; c++) {
                        if (g[c].IsChecked) {
                            l.push({
                                ID: g[c].ID,
                                UserID: g[c].UserID,
                                UserName: g[c].UserName,
                                Password: g[c].Password,
                                IP: g[c].IP,
                                CreateTime: g[c].CreateTime,
                                LoginState: g[c].LoginState,
                                LastLoginTime: g[c].LastLoginTime,
                                Gender: g[c].Gender,
                                Email: g[c].Email,
                                Birthday: g[c].Birthday,
                                Mobile: g[c].Mobile,
                                RoleID: g[c].RoleID,
                                PostID: g[c].PostID,
                                State: g[c].State,
                                TenantID: g[c].TenantID,
                                JobTitle: g[c].JobTitle
                            })
                        }
                    }
                }
            }
            return request = {Role: h, Auths: k, Users: l}
        }, DealResponseRoleList: function (d, f) {
            if (d != undefined && d != null && d.length > 0) {
                for (var c = 0; c < d.length; c++) {
                    d[c].RolePermissionStr = "";
                    for (var b = 0; b < d[c].Auths.length; b++) {
                        var e = "";
                        if (d[c].Auths[b].Auth.Auth) {
                            for (var a = 0; a < f.length; a++) {
                                if (f[a].Module.ModuleID == d[c].Auths[b].Module.ModuleID) {
                                    for (var g = 0; g < f[a].Auths.length; g++) {
                                        if (d[c].Auths[b].Auth.Auth & f[a].Auths[g].AuthValue) {
                                            if (e) {
                                                e = e + "，" + f[a].Auths[g].AuthName
                                            } else {
                                                e = "(" + f[a].Auths[g].AuthName
                                            }
                                        }
                                    }
                                }
                            }
                            e = e + ")";
                            if (d[c].RolePermissionStr == "") {
                                d[c].RolePermissionStr = d[c].Auths[b].Module.ModuleName + e
                            } else {
                                d[c].RolePermissionStr = d[c].RolePermissionStr + "，" + d[c].Auths[b].Module.ModuleName + e
                            }
                        }
                    }
                }
            }
            return d
        }
    }
}]);
clinicModule.service("RoleService", ["$http", "HttpService", "ResourceFactory", "RoleFactory", "PermissionFactory", function (f, c, b, e, a) {
    var d = {};
    d.initialize = function (g) {
        b.module = MenuEnum.ClinicMG;
        d.getPermission(g)
    };
    d.getMappingRole = function (g) {
        return e.MappingRole(g)
    };
    d.searchRole = function (j, h) {
        var i;
        var g = CommonFun.getDataFromSession("CurrentUser");
        $("#loading_div").modal("show");
        if (j != "" && j != null && j != undefined) {
            i = {TenantID: g != null ? g.Body.Tenant.TenantID : "", RoleName: j.Condition, IsNeedAuth: 1}
        } else {
            i = {TenantID: g != null ? g.Body.Tenant.TenantID : "", RoleName: "", IsNeedAuth: 1}
        }
        try {
            c.roleRequest(i, b.operateCode.get, function (l) {
                $("#loading_div").modal("hide");
                if (l.Header.StatusCode == 0) {
                    e.RoleList = l.Body;
                    h.roleList = e.DealResponseRoleList(e.RoleList, e.PermissionList);
                    var n = [];
                    if (h.roleList && h.roleList.length > 0) {
                        for (var m = 0; m < h.roleList.length; m++) {
                            n.push({label: h.roleList[m].Role.RoleName, value: JSON.stringify(h.roleList[m])})
                        }
                    }
                    $("#pos_role").autocomplete({
                        minLength: 1, source: n, focus: function (o, p) {
                            return false
                        }, select: function (o, p) {
                            var q = JSON.parse(p.item.value);
                            h.editRole(q);
                            return false
                        }, change: function (o, p) {
                            h.addNewRole(true)
                        }, search: function (o, p) {
                        }, response: function (o, p) {
                            if (!p.content || p.content.length == 0) {
                                h.addNewRole(true)
                            }
                        }
                    })
                } else {
                    d.alert(GetErrormsg(l.Header.StatusCode))
                }
            }, function (l) {
                console.log(l)
            })
        } catch (k) {
            console.log(k)
        }
    };
    d.getPermission = function (g) {
        try {
            c.permissionRequest("", b.operateCode.get, function (i) {
                if (i.Header.StatusCode == 0) {
                    e.PermissionList = i.Body;
                    g.permissionList = e.PermissionList
                } else {
                    d.alert(GetErrormsg(i.Header.StatusCode))
                }
            }, function (i) {
                console.log(i);
                d.alert("系统繁忙，请稍后再试！")
            })
        } catch (h) {
            console.log(h)
        }
    };
    d.saveRole = function (g) {
        var j;
        var h = e.DealRequestRole(g.currentRole, g.roleEmployeeList, g.permissionList);
        if (h == "") {
            d.alert("至少勾选一个权限!");
            return
        }
        if (g.operateType == 0) {
            j = b.operateCode.insert
        } else {
            j = b.operateCode.update
        }
        try {
            c.roleRequest(h, j, function (k) {
                if (k.Header.StatusCode == 0) {
                    $("#new_role").modal("hide");
                    var l = "";
                    if (g.operateType == 0) {
                        l = "新增成功！";
                        d.searchRole("", g)
                    } else {
                        if (h.Role.State) {
                            l = "已成功删除！"
                        } else {
                            l = "更新成功！"
                        }
                        if (k.Body != null) {
                            d.searchRole("", g)
                        }
                    }
                    d.alert(l)
                } else {
                    d.alert(GetErrormsg(k.Header.StatusCode))
                }
            }, function (k) {
                d.alert("系统繁忙，请稍后再试！");
                console.log(k)
            })
        } catch (i) {
            console.log(i)
        }
    };
    d.drawCurrentRolePermission = function (q, n) {
        n.permissionList = [];
        if (q != undefined && q != null && q.Auths.length > 0) {
            var o = [];
            for (var l = 0; l < q.Auths.length; l++) {
                var p = {};
                p.Module = q.Auths[l].Module;
                p.Auths = [];
                p.Auth = q.Auths[l].Auth;
                if (q.Auths[l].Auth.Auth > 0) {
                    p.isOwned = true
                }
                if (e.PermissionList && e.PermissionList.length > 0) {
                    for (var k = 0; k < e.PermissionList.length; k++) {
                        if (e.PermissionList[k].Module.ModuleID == q.Auths[l].Module.ModuleID) {
                            for (var g = 0; g < e.PermissionList[k].Auths.length; g++) {
                                var h = {
                                    AuthID: e.PermissionList[k].Auths[g].AuthID,
                                    AuthValue: e.PermissionList[k].Auths[g].AuthValue,
                                    AuthName: e.PermissionList[k].Auths[g].AuthName,
                                    Description: e.PermissionList[k].Auths[g].Description
                                };
                                if (q.Auths[l].Auth.Auth & e.PermissionList[k].Auths[g].AuthValue) {
                                    h.IsChecked = true
                                } else {
                                    h.IsChecked = false
                                }
                                p.Auths.push(h)
                            }
                        }
                    }
                }
                o.push(p)
            }
            n.permissionList = o
        }
    };
    d.isWithOperatePermission = function (g) {
        var h = b.Auths[g];
        return a.isWithOperatePermission(MenuEnum.ClinicMG, h)
    };
    d.confirm = function (h, i, g) {
        b.MsgBox.Confirm("温馨提示", h, i, g)
    };
    d.alert = function (g) {
        b.MsgBox.Alert("消息", g)
    };
    return d
}]);
clinicModule.service("EquipmentService", ["HttpService", "ResourceFactory", "PermissionFactory", function (d, b, a) {
    var c = {};
    c.searchEquip = function (h, f) {
        var g;
        $("#loading_div").modal("show");
        if (h != "" && h != null && h != undefined) {
            g = {
                TenantID: CommonFun.getDataFromSession("CurrentUser").Body.Tenant.TenantID,
                EquipmentName: h.EquipmentName,
                AddTime: h.AddTime,
                AddUserID: h.AddUserID,
                EquipmentCategoryID: !h.EquipmentCategoryID ? "" : h.EquipmentCategoryID
            }
        } else {
            g = {TenantID: CommonFun.getDataFromSession("CurrentUser").Body.Tenant.TenantID}
        }
        try {
            d.EquipmentDealRequest(g, b.operateCode.get, function (e) {
                $("#loading_div").modal("hide");
                $(".body_hide").css("opacity", "1");
                if (e.Header.StatusCode == 0) {
                    f.equipList = e.Body
                } else {
                    c.alert(GetErrormsg(e.Header.StatusCode))
                }
            }, function (e) {
                c.alert("系统繁忙，请稍后重试！");
                console.log(e)
            })
        } catch (i) {
            console.log(i)
        }
    };
    c.getCategoryDealList = function (g, f) {
        try {
            d.EquipmentCategoryDealRequest(g, b.operateCode.get, function (e) {
                if (e.Header.StatusCode == 0) {
                    f.categoryDealList = e.Body;
                    if (f.categoryDealList && f.categoryDealList.length > 0) {
                        f.selectedType(null)
                    }
                } else {
                    f.categoryDealList = null
                }
            }, function (e) {
                console.log(e)
            })
        } catch (h) {
            console.log(h)
        }
    };
    c.addCategoryItem = function (f) {
        var g = f.newCategoryDeal;
        try {
            d.EquipmentCategoryDealRequest(g, b.operateCode.insert, function (e) {
                if (e.Header.StatusCode == 0) {
                    $("#new_type").modal("hide");
                    c.alert("新增成功！");
                    c.getCategoryDealList(g, f)
                } else {
                    c.alert(GetErrormsg(e.Header.StatusCode))
                }
            }, function (e) {
                c.alert("系统繁忙，请稍后重试！");
                console.log(e)
            })
        } catch (h) {
            console.log(h)
        }
    };
    c.updateCategoryItem = function (g, f) {
        try {
            d.EquipmentCategoryDealRequest(g, b.operateCode.update, function (e) {
                if (e.Header.StatusCode == 0) {
                    if (f.operateType == 1) {
                        $("#new_type").modal("hide");
                        c.alert("更新成功！")
                    } else {
                        c.alert("删除成功！")
                    }
                    c.getCategoryDealList(f.searchInfo, f)
                } else {
                    c.alert(GetErrormsg(e.Header.StatusCode))
                }
            }, function (e) {
                c.alert("系统繁忙，请稍后重试！");
                console.log(e)
            })
        } catch (h) {
            console.log(h)
        }
    };
    c.getEquipList = function (g, f) {
        try {
            d.EquipmentDealRequest(g, b.operateCode.get, function (e) {
                if (e.Header.StatusCode == 0) {
                    f.equipList = e.Body
                } else {
                    f.equipList = null
                }
            }, function (e) {
                console.log(e)
            })
        } catch (h) {
            console.log(h)
        }
    };
    c.saveEquipItem = function (g, f) {
        var i = (f.operateType == 0 ? b.operateCode.insert : b.operateCode.update);
        try {
            d.EquipmentDealRequest(g, i, function (e) {
                if (e.Header.StatusCode == 0) {
                    $("#new_equipment").modal("hide");
                    if (f.operateType == 0) {
                        c.alert("新增成功！")
                    } else {
                        c.alert("更新成功！")
                    }
                    c.getCategoryDealList(g, f)
                } else {
                    c.alert(GetErrormsg(e.Header.StatusCode))
                }
            }, function (e) {
                c.alert("系统繁忙，请稍后重试！");
                console.log(e)
            })
        } catch (h) {
            console.log(h)
        }
    };
    c.deleteEquipItem = function (g, f) {
        try {
            d.EquipmentDealRequest(g, b.operateCode.remove, function (e) {
                if (e.Header.StatusCode == 0) {
                    c.alert("删除成功！");
                    c.getCategoryDealList(g, f)
                } else {
                    c.alert(GetErrormsg(e.Header.StatusCode))
                }
            }, function (e) {
                c.alert("系统繁忙，请稍后重试！");
                console.log(e)
            })
        } catch (h) {
            console.log(h)
        }
    };
    c.ExportEquipment = function (g) {
        var e = CommonFun.getDataFromSession("CurrentUser");
        var f = WebServer.getUrl("EquipmentExport");
        f = f + "?TenantID=" + e.Body.Tenant.TenantID + "&EquipmentIDs=" + g.EquipmentIDs + "&Token=" + e.Header.Token + "&Module=" + b.module;
        window.location.href = f
    };
    c.updateModule = function (e) {
        switch (e) {
            case 1:
                b.module = MenuEnum.ClinicMG;
                break;
            case 2:
                b.module = 11;
                break;
            default:
                break
        }
    };
    c.isWithOperatePermission = function (e) {
        var f = b.Auths[e];
        return a.isWithOperatePermission(MenuEnum.ClinicMG, f)
    };
    c.confirm = function (f, g, e) {
        b.MsgBox.Confirm("温馨提示", f, g, e)
    };
    c.alert = function (e) {
        b.MsgBox.Alert("消息", e)
    };
    return c
}]);
clinicModule.controller("ClinicController", ["$scope", "RoleService", "EmployeeService", "EquipmentService", function (a, d, b, c) {
    a.roleList = "";
    a.currentRole = {};
    a.operateType = 0;
    a.genderList = GenderList;
    a.initialize = function () {
        a.isEmployee = true;
        a.isPos = false;
        a.isEquipment = false;
        a.posList = PosList;
        d.initialize(a);
        b.searchEmployee("", a)
    };
    a.switchPassword = function () {
        if ($($("#new_employee input[name='empPassword']")[0]).prop("type") == "password") {
            $($("#new_employee input[name='empPassword']")[0]).prop("type", "text")
        } else {
            $($("#new_employee input[name='empPassword']")[0]).prop("type", "password")
        }
    };
    a.searchEmployee = function () {
        b.searchEmployee(a.searchInfo, a)
    };
    a.addNewEmployee = function () {
        if (!d.isWithOperatePermission("ClinicMG_addEmployee")) {
            b.alert("对不起，您没有权限，请联系管理员！");
            return
        }
        a.resetEmployee();
        a.operateType = 0;
        a.editEmployeeInfo.OperateTitle = "新增员工";
        b.getRoleList(a);
        $("#new_employee").modal("show")
    };
    a.saveEmployee = function () {
        if (!$.formValidator.pageIsValid("2")) {
            return
        }
        a.currentEmployee = b.getMappingEmployee(a.editEmployeeInfo);
        a.currentEmployee.TenantID = CommonFun.getDataFromSession("CurrentUser").Body.Tenant.TenantID;
        b.addNewEmployee(a)
    };
    a.resetEmployee = function () {
        a.editEmployeeInfo = {
            Birthday: "",
            Email: "",
            Gender: 0,
            IP: "",
            LastLoginTime: "",
            LoginState: 0,
            Mobile: "",
            NickName: "",
            Password: "",
            RoleID: 0,
            RoleName: "",
            OperateTitle: "员工编辑",
            RoleState: 0,
            State: 0,
            TenantID: "",
            UserName: "",
            isDoctor: "",
            PostID: 0
        }
    };
    a.editEmployee = function (f) {
        if (!d.isWithOperatePermission("ClinicMG_editEmployee")) {
            b.alert("对不起，您没有权限，请联系管理员！");
            return
        }
        b.getRoleList(a);
        a.editEmployeeInfo = b.getMappingEmployee(f);
        a.operateType = 1;
        a.editEmployeeInfo.OperateTitle = "员工编辑";
        $("#new_employee").modal("show")
    };
    a.deleteEmployee = function (f) {
        if (!d.isWithOperatePermission("ClinicMG_deleteEmployee")) {
            b.alert("对不起，您没有权限，请联系管理员！");
            return
        }
        b.confirm("确定要删除员工：" + f.UserName + "？", function () {
            b.deleteCurrentEmployee(a, f)
        })
    };
    a.employeeShow = function () {
        a.isEmployee = true;
        a.isPos = false;
        a.isEquipment = false;
        c.updateModule(1);
        b.searchEmployee("", a)
    };
    a.searchRole = function () {
        d.searchRole(a.searchInfo, a)
    };
    a.addNewRole = function (f) {
        if (!d.isWithOperatePermission("ClinicMG_editPosition")) {
            b.alert("对不起，您没有权限，请联系管理员！");
            return
        }
        a.operateType = 0;
        d.getPermission(a);
        b.getEmployeesWithoutRole(a, true, "");
        if (!f) {
            a.resetRole();
            a.currentRole.OperateTitle = "新增职位";
            $("#new_role").modal("show")
        } else {
            a.currentRole.ID = 0;
            a.currentRole.IsAppoint = false;
            a.currentRole.TenantID = "";
            a.currentRole.RoleID = "";
            a.currentRole.CreateTime = "";
            a.currentRole.OperateTitle = "新增职位";
            a.currentRole.State = 0;
            a.currentRole.Description = ""
        }
    };
    a.saveRole = function () {
        if (!$.formValidator.pageIsValid("4")) {
            return
        }
        d.saveRole(a)
    };
    a.editRole = function (f) {
        if (!d.isWithOperatePermission("ClinicMG_editPosition")) {
            b.alert("对不起，您没有权限，请联系管理员！");
            return
        }
        a.operateType = 1;
        b.getEmployeesWithoutRole(a, false, f);
        d.drawCurrentRolePermission(f, a);
        a.currentRole = d.getMappingRole(f);
        a.currentRole.OperateTitle = "编辑职位";
        $("#new_role").modal("show")
    };
    a.resetRole = function () {
        a.currentRole = {
            ID: 0,
            TenantID: "",
            IsAppoint: false,
            RoleID: "",
            CreateTime: "",
            OperateTitle: "编辑职位",
            State: 0,
            RoleName: "",
            Description: ""
        }
    };
    a.deleteRole = function (f) {
        if (!d.isWithOperatePermission("ClinicMG_editPosition")) {
            b.alert("对不起，您没有权限，请联系管理员！");
            return
        }
        b.confirm("确定要删除角色：" + f.Role.RoleName + "？", function () {
            a.operateType = 2;
            d.drawCurrentRolePermission(f, a);
            f.Role.State = 1;
            a.currentRole = d.getMappingRole(f);
            d.saveRole(a)
        })
    };
    a.roleShow = function () {
        a.isEmployee = false;
        a.isPos = true;
        a.isEquipment = false;
        c.updateModule(1);
        d.searchRole("", a)
    };
    a.updatePermission = function (f, h) {
        if (h == 1) {
            if (f && f.isOwned) {
                f.isOwned = false;
                for (var g = 0; g < f.Auths.length; g++) {
                    f.Auths[g].IsChecked = false
                }
            } else {
                for (var g = 0; g < f.Auths.length; g++) {
                    if (f.Auths[g].AuthName == "访问") {
                        f.Auths[g].IsChecked = true;
                        break
                    }
                }
                f.isOwned = true
            }
        }
        if (h == 2 && f.AuthName != "访问") {
            if (f && f.IsChecked) {
                f.IsChecked = false
            } else {
                f.IsChecked = true
            }
        }
        if (h == 3) {
            if (f && f.IsChecked) {
                f.IsChecked = false
            } else {
                f.IsChecked = true
            }
        }
    };
    a.isAbleDelete = function (f) {
        if (f.Role.RoleName == "护士" || f.Role.RoleName == "医生" || f.Role.RoleName == "前台" || f.Role.RoleName == "院长") {
            return false
        } else {
            return true
        }
    };
    a.equipmentShow = function () {
        a.isEmployee = false;
        a.isPos = false;
        a.isEquipment = true;
        c.updateModule(2);
        var f = {TenantID: CommonFun.getDataFromSession("CurrentUser").Body.Tenant.TenantID};
        c.getCategoryDealList(f, a)
    };
    a.searchEquip = function () {
        c.searchEquip(a.searchInfo, a)
    };
    a.addType = function (f, g) {
        if (!c.isWithOperatePermission("Equip_editEquipment")) {
            c.alert("对不起，您没有权限，请联系管理员！");
            return
        }
        if (f == 1) {
            a.operateType = 0;
            a.newCategoryDeal = {
                Title: "新增类别",
                ID: 0,
                EquipmentCategoryName: "",
                State: 0,
                TenantID: CommonFun.getDataFromSession("CurrentUser").Body.Tenant.TenantID
            }
        } else {
            if (!g.TenantID) {
                c.alert("对不起，基础数据不能修改！");
                return
            }
            a.operateType = 1;
            a.newCategoryDeal = {
                Title: "编辑类别",
                EquipmentCategoryName: g.EquipmentCategoryName,
                State: 0,
                EquipmentCategoryID: g.EquipmentCategoryID,
                ID: g.ID,
                CreateTime: g.CreateTime,
                TenantID: CommonFun.getDataFromSession("CurrentUser").Body.Tenant.TenantID
            }
        }
        $("#new_type").modal("show")
    };
    a.saveCategoryDeal = function () {
        if (!$.formValidator.pageIsValid("5")) {
            return
        }
        if (a.operateType == 0) {
            c.addCategoryItem(a)
        } else {
            c.updateCategoryItem(a.newCategoryDeal, a)
        }
    };
    a.deleteType = function (f) {
        if (!c.isWithOperatePermission("Equip_editEquipment")) {
            c.alert("对不起，您没有权限，请联系管理员！");
            return
        }
        if (!f.TenantID) {
            c.alert("对不起，基础数据不能删除！");
            return
        }
        a.operateType = 0;
        c.confirm("确定要删除类别【" + f.EquipmentCategoryName + "】吗？", function () {
            if (a.equipList == null || a.equipList.length == 0 || a.equipList == undefined) {
                f.State = 1;
                c.updateCategoryItem(f, a)
            } else {
                c.alert("该类别还存在设备，不能删除！");
                return
            }
        })
    };
    var e = function (h, i, j, g) {
        var f = "topLeft";
        if (g) {
            f = g
        }
        if (j) {
            $("#" + j).validationEngine("showPrompt", i, "", f, true);
            setTimeout(function () {
                $("#" + j).validationEngine("hideAll")
            }, 1000)
        } else {
            $(h).validationEngine("showPrompt", i, "", f, true);
            setTimeout(function () {
                $(h).validationEngine("hideAll")
            }, 1000)
        }
    };
    a.addEquipment = function () {
        if (!c.isWithOperatePermission("Equip_editEquipment")) {
            c.alert("对不起，您没有权限，请联系管理员！");
            return
        }
        a.equip = {
            Title: "新增设备",
            equipInfo: {
                ID: 0,
                EquipmentID: "",
                EquipmentName: "",
                AddUserID: "",
                AddUserName: "",
                EquipmentCategoryID: "",
                EquipmentCategoryName: "",
                Warranty: "",
                AddTime: "",
                Specification: "",
                AdvanceDays: 3,
                Model: "",
                Maker: "",
                InstallationTime: "",
                Quantity: "",
                MaintenanceUnit: "",
                MaintenanceContact: "",
                Remark: "",
                State: 0,
                RKDH: "",
                TenantID: "",
                CreateTime: "",
                OutTime: "",
                Unit: ""
            }
        };
        a.EquipCategory = "";
        a.User = "";
        a.operateType = 0;
        $("#new_equipment").modal("show")
    };
    a.saveEquip = function () {
        if (!a.equip.equipInfo.AddTime) {
            e("", "请选择入库时间！", "equipDate", "topLeft");
            return
        }
        if (!$.formValidator.pageIsValid("6")) {
            return
        }
        if (!a.equip.equipInfo.Warranty) {
            e("", "请选择保修年限！", "warrantyData", "topLeft");
            return
        }
        var h = a.EquipCategory.split("-");
        var f = a.User.split("-");
        var g = {
            EquipmentCategoryID: h[0],
            EquipmentCategoryName: h[1],
            AddUserID: f[0],
            AddUserName: f[1],
            ID: a.equip.equipInfo.ID,
            EquipmentID: a.equip.equipInfo.EquipmentID,
            EquipmentName: a.equip.equipInfo.EquipmentName,
            Warranty: a.equip.equipInfo.Warranty,
            AddTime: a.equip.equipInfo.AddTime,
            Specification: a.equip.equipInfo.Specification,
            AdvanceDays: a.equip.equipInfo.AdvanceDays,
            Model: a.equip.equipInfo.Model,
            Maker: a.equip.equipInfo.Maker,
            InstallationTime: a.equip.equipInfo.InstallationTime,
            Quantity: a.equip.equipInfo.Quantity,
            MaintenanceUnit: a.equip.equipInfo.MaintenanceUnit,
            MaintenanceContact: a.equip.equipInfo.MaintenanceContact,
            Remark: a.equip.equipInfo.Remark,
            State: a.equip.equipInfo.State,
            RKDH: a.equip.equipInfo.RKDH,
            TenantID: a.equip.equipInfo.TenantID,
            CreateTime: a.equip.equipInfo.CreateTime,
            OutTime: a.equip.equipInfo.OutTime,
            Unit: a.equip.equipInfo.Unit
        };
        c.saveEquipItem(g, a)
    };
    a.selectedType = function (g, f) {
        $("#type_list .ty_item_selected").removeClass("ty_item_selected");
        if (f) {
            if (!$(f.target).prop("class") || $(f.target).prop("class").indexOf("ty_item_selected") < 0) {
                if (f.target.nodeName == "SPAN") {
                    $($(f.target).parent()).addClass("ty_item_selected")
                } else {
                    $(f.target).addClass("ty_item_selected")
                }
            }
        } else {
            $($("#type_list .ty_item_h")[0]).addClass("ty_item_selected")
        }
        if (g) {
            a.searchInfo = {EquipmentCategoryID: g.EquipmentCategoryID, TenantID: g.TenantID};
            c.searchEquip(a.searchInfo, a)
        } else {
            a.searchInfo = {EquipmentCategoryID: ""};
            c.searchEquip(a.searchInfo, a)
        }
    };
    a.showOperate = function (f) {
        f.isShow = true
    };
    a.hideOperate = function (f) {
        f.isShow = false
    };
    a.editEquipment = function (f) {
        if (!c.isWithOperatePermission("Equip_editEquipment")) {
            c.alert("对不起，您没有权限，请联系管理员！");
            return
        }
        a.EquipCategory = f.EquipmentCategoryID + "-" + f.EquipmentCategoryName;
        a.User = f.AddUserID + "-" + f.AddUserName;
        a.equip = {Title: "编辑设备", equipInfo: JSON.parse(JSON.stringify(f))};
        a.operateType = 1;
        $("#new_equipment").modal("show")
    };
    a.timeText = function (g) {
        if (g) {
            var f = new Date(g).Format("yyyy-MM-dd");
            return f
        }
    };
    a.isOverWarranty = function (j) {
        if (j) {
            var g = new Date();
            var i = j.AdvanceDays;
            var h = j.Warranty;
            h = new Date(h.replace(/-/g, "/"));
            var k = h.getTime() - g;
            var f = parseInt(k / (1000 * 60 * 60 * 24));
            if (f <= i) {
                return true
            } else {
                return false
            }
        } else {
            return false
        }
    };
    a.loadEquipment = function () {
        var g = [];
        for (var h = 0; h < a.equipList.length; h++) {
            if (a.equipList[h].isSelected == true) {
                g[h] = a.equipList[h].EquipmentID;
                var f = g.join(",");
                a.deleteEquipItem = {EquipmentIDs: f, TenantID: a.equipList[h].TenantID, State: 1}
            }
        }
    };
    a.deleteEquipment = function () {
        if (!c.isWithOperatePermission("Equip_editEquipment")) {
            c.alert("对不起，您没有权限，请联系管理员！");
            return
        }
        a.loadEquipment();
        if (!a.deleteEquipItem) {
            c.alert("请勾选需删除设备！");
            return
        }
        c.confirm("确定要删除所勾选设备吗？", function () {
            c.deleteEquipItem(a.deleteEquipItem, a)
        })
    };
    a.EquipmentExport = function () {
        if (!c.isWithOperatePermission("Equip_exportEquipment")) {
            c.alert("对不起，您没有权限，请联系管理员！");
            return
        }
        a.loadEquipment();
        if (!a.deleteEquipItem) {
            c.alert("请勾选需导出设备！");
            return
        }
        c.ExportEquipment(a.deleteEquipItem)
    };
    a.initialize()
}]);
angular.bootstrap($("#main-content"), ["ClinicModule"]);